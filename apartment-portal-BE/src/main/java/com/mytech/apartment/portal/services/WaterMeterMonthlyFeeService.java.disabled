package com.mytech.apartment.portal.services;

import com.mytech.apartment.portal.models.Apartment;
import com.mytech.apartment.portal.models.ServiceFeeConfig;
import com.mytech.apartment.portal.models.WaterMeterReading;
import com.mytech.apartment.portal.repositories.ApartmentRepository;
import com.mytech.apartment.portal.repositories.ServiceFeeConfigRepository;
import com.mytech.apartment.portal.repositories.WaterMeterReadingRepository;
import java.util.stream.Collectors;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.math.BigDecimal;
import java.time.YearMonth;
import java.util.List;
import java.util.Optional;

@Service
public class WaterMeterMonthlyFeeService implements MonthlyFeeService {

    @Autowired
    private WaterMeterReadingRepository waterMeterReadingRepository;

    @Autowired
    private ServiceFeeConfigRepository serviceFeeConfigRepository;

    @Autowired
    private InvoiceService invoiceService;
    
    @Autowired
    private ApartmentRepository apartmentRepository;

    @Override
    @Transactional
    public void generateFeeForMonth(String billingPeriod) {
        // L·∫•y t·∫•t c·∫£ cƒÉn h·ªô
        List<Long> apartmentIds = apartmentRepository.findAll().stream()
            .map(apartment -> apartment.getId())
            .collect(Collectors.toList());
        
        System.out.println("==== WATER METER BILLING DEBUG ====");
        System.out.println("DEBUG: WaterMeterMonthlyFeeService - T√¨m th·∫•y " + apartmentIds.size() + " cƒÉn h·ªô");
        System.out.println("DEBUG: Billing period: " + billingPeriod);
        
        // L·∫•y c·∫•u h√¨nh ph√≠ n∆∞·ªõc cho th√°ng
        YearMonth yearMonth = YearMonth.parse(billingPeriod);
        Optional<ServiceFeeConfig> config = serviceFeeConfigRepository
            .findByMonthAndYear(yearMonth.getMonthValue(), yearMonth.getYear());
        
        double waterFeePerM3 = config.map(ServiceFeeConfig::getWaterFeePerM3)
            .orElse(15000.0); // Gi√° m·∫∑c ƒë·ªãnh 15000 VND/m3
        
        for (Long apartmentId : apartmentIds) {
            if (apartmentId == 56) {
                System.out.println("üìç PROCESSING APARTMENT 56 - START");
            }
            
            // T√¨m ch·ªâ s·ªë n∆∞·ªõc c·ªßa cƒÉn h·ªô n√†y
            Optional<WaterMeterReading> readingOpt = waterMeterReadingRepository
                .findByApartmentIdAndReadingMonth(apartmentId.intValue(), billingPeriod);
            
            if (apartmentId == 56) {
                System.out.println("üìä Apartment 56 - Reading exists: " + readingOpt.isPresent());
                if (readingOpt.isPresent()) {
                    WaterMeterReading r = readingOpt.get();
                    System.out.println("üìä Apartment 56 - Previous: " + r.getPreviousReading());
                    System.out.println("üìä Apartment 56 - Current: " + r.getCurrentReading()); 
                    System.out.println("üìä Apartment 56 - Consumption: " + r.getConsumption());
                }
            }
            
            double waterFee = 0.0;
            String description;
            
            if (readingOpt.isPresent()) {
                WaterMeterReading reading = readingOpt.get();
                BigDecimal consumption = reading.getConsumption();
                if (consumption.compareTo(BigDecimal.ZERO) > 0) {
                    waterFee = consumption.doubleValue() * waterFeePerM3;
                    description = String.format("Ph√≠ n∆∞·ªõc th√°ng %s (%.2f m¬≥ x %.0f VND/m¬≥)", 
                        billingPeriod, consumption, waterFeePerM3);
                } else {
                    description = String.format("Ph√≠ n∆∞·ªõc th√°ng %s (0 m¬≥ x %.0f VND/m¬≥)", 
                        billingPeriod, waterFeePerM3);
                }
            } else {
                description = String.format("Ph√≠ n∆∞·ªõc th√°ng %s (0 m¬≥ x %.0f VND/m¬≥)", 
                    billingPeriod, waterFeePerM3);
            }
            
            if (apartmentId == 56) {
                System.out.println("üí∞ Apartment 56 - Calculated water fee: " + waterFee + " VND");
                System.out.println("üí∞ Apartment 56 - Description: " + description);
                System.out.println("üí∞ Apartment 56 - Water rate: " + waterFeePerM3 + " VND/m3");
            }

            System.out.println("DEBUG: WaterMeterMonthlyFeeService - CƒÉn h·ªô " + apartmentId + 
                " ph√≠ n∆∞·ªõc " + waterFee + " VND");

            // Th√™m v√†o h√≥a ƒë∆°n (lu√¥n th√™m, c√≥ th·ªÉ l√† 0)
            try {
                invoiceService.addInvoiceItem(
                    apartmentId,
                    billingPeriod,
                    "WATER_FEE",
                    description,
                    BigDecimal.valueOf(waterFee)
                );
                if (apartmentId == 56) {
                    System.out.println("‚úÖ Apartment 56 - Successfully added water fee to invoice!");
                }
                System.out.println("DEBUG: WaterMeterMonthlyFeeService - ƒê√£ th√™m ph√≠ n∆∞·ªõc cho cƒÉn h·ªô " + apartmentId);
            } catch (Exception e) {
                if (apartmentId == 56) {
                    System.err.println("‚ùå Apartment 56 - Failed to add water fee: " + e.getMessage());
                    e.printStackTrace();
                }
                System.err.println("DEBUG: WaterMeterMonthlyFeeService - L·ªói khi th√™m ph√≠ n∆∞·ªõc cho cƒÉn h·ªô " + apartmentId + ": " + e.getMessage());
            }
            
            if (apartmentId == 56) {
                System.out.println("üìç PROCESSING APARTMENT 56 - END");
                System.out.println("=====================================");
            }
        }
    }
    
    @Override
    @Transactional
    public void generateFeeForMonth(String billingPeriod, Long apartmentId) {
        // L·∫•y ch·ªâ s·ªë n∆∞·ªõc c·ªßa cƒÉn h·ªô c·ª• th·ªÉ trong th√°ng
        Optional<WaterMeterReading> readingOpt = waterMeterReadingRepository
            .findByApartmentIdAndReadingMonth(apartmentId.intValue(), billingPeriod);
        
        // L·∫•y c·∫•u h√¨nh ph√≠ n∆∞·ªõc cho th√°ng
        YearMonth yearMonth = YearMonth.parse(billingPeriod);
        Optional<ServiceFeeConfig> config = serviceFeeConfigRepository
            .findByMonthAndYear(yearMonth.getMonthValue(), yearMonth.getYear());
        
        double waterFeePerM3 = config.map(ServiceFeeConfig::getWaterFeePerM3)
            .orElse(15000.0); // Gi√° m·∫∑c ƒë·ªãnh 15000 VND/m3
        
        double waterFee = 0.0;
        String description;
        
        if (readingOpt.isPresent()) {
            WaterMeterReading reading = readingOpt.get();
            // T√≠nh ti√™u th·ª• n∆∞·ªõc
            BigDecimal consumption = reading.getConsumption();
            if (consumption.compareTo(BigDecimal.ZERO) > 0) {
                waterFee = consumption.doubleValue() * waterFeePerM3;
                description = String.format("Ph√≠ n∆∞·ªõc th√°ng %s (%.2f m¬≥ x %.0f VND/m¬≥)", 
                    billingPeriod, consumption, waterFeePerM3);
            } else {
                description = String.format("Ph√≠ n∆∞·ªõc th√°ng %s (0 m¬≥ x %.0f VND/m¬≥)", 
                    billingPeriod, waterFeePerM3);
            }
        } else {
            description = String.format("Ph√≠ n∆∞·ªõc th√°ng %s (0 m¬≥ x %.0f VND/m¬≥)", 
                billingPeriod, waterFeePerM3);
        }
        
        // Th√™m v√†o h√≥a ƒë∆°n (lu√¥n th√™m, c√≥ th·ªÉ l√† 0)
        try {
            invoiceService.addInvoiceItem(
                apartmentId,
                billingPeriod,
                "WATER_FEE",
                description,
                BigDecimal.valueOf(waterFee)
            );
            System.out.println("DEBUG: ƒê√£ t·∫°o ph√≠ n∆∞·ªõc cho cƒÉn h·ªô " + apartmentId + " th√°ng " + billingPeriod + " v·ªõi s·ªë ti·ªÅn " + waterFee + " VND");
        } catch (Exception e) {
            System.err.println("DEBUG: L·ªói khi t·∫°o ph√≠ n∆∞·ªõc cho cƒÉn h·ªô " + apartmentId + " th√°ng " + billingPeriod + ": " + e.getMessage());
        }
    }
} 