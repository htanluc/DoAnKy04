package com.mytech.apartment.portal.config;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Comparator;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Component;
import org.springframework.context.annotation.Profile;
import org.springframework.transaction.annotation.Transactional;

import com.mytech.apartment.portal.models.*;
import com.mytech.apartment.portal.models.enums.*;
import com.mytech.apartment.portal.repositories.*;
import com.mytech.apartment.portal.repositories.FeedbackCategoryRepository;
import com.mytech.apartment.portal.models.enums.PaymentMethod;
import com.mytech.apartment.portal.dtos.WaterMeterReadingDto;
import com.mytech.apartment.portal.repositories.WaterMeterReadingRepository;
import java.math.BigDecimal;
import java.time.YearMonth;
import com.mytech.apartment.portal.models.WaterMeterReading;

@Component
@Profile("!test")
public class DataInitializer implements CommandLineRunner {
    @Autowired private UserRepository userRepository;
    @Autowired private RoleRepository roleRepository;
    @Autowired private BuildingRepository buildingRepository;
    @Autowired private ApartmentRepository apartmentRepository;
    @Autowired private ApartmentResidentRepository apartmentResidentRepository;
    @Autowired private FacilityRepository facilityRepository;
    @Autowired private ServiceCategoryRepository serviceCategoryRepository;
    @Autowired private AnnouncementRepository announcementRepository;
    @Autowired private EventRepository eventRepository;
    @Autowired private EventRegistrationRepository eventRegistrationRepository;
    @Autowired private FacilityBookingRepository facilityBookingRepository;
    @Autowired private InvoiceRepository invoiceRepository;
    @Autowired private InvoiceItemRepository invoiceItemRepository;
    @Autowired private PaymentRepository paymentRepository;
    @Autowired private ServiceRequestRepository serviceRequestRepository;
    @Autowired private FeedbackRepository feedbackRepository;
    @Autowired private ActivityLogRepository activityLogRepository;
    @Autowired private AiQaHistoryRepository aiQaHistoryRepository;
    @Autowired private PasswordEncoder passwordEncoder;
    @Autowired private FeedbackCategoryRepository feedbackCategoryRepository;
    @Autowired private WaterMeterReadingRepository waterMeterReadingRepository;
    @Autowired private VehicleRepository vehicleRepository;
    // @Autowired private PaymentMethodRepository paymentMethodRepository; // Comment out if not exists
    // @Autowired private EmergencyContactRepository emergencyContactRepository; // Comment out if not exists
    // @Autowired private ApartmentInvitationRepository apartmentInvitationRepository; // Comment out if not exists
    // @Autowired private ServiceFeeConfigRepository serviceFeeConfigRepository; // Comment out if not exists

    @Override
    public void run(String... args) throws Exception {
        System.out.println("üöÄ Starting comprehensive data initialization...");
        
        // PART 1: ROLES & USERS (Enhanced with more realistic data)
        initializeRolesAndUsers();
        
        // PART 2: BUILDINGS & APARTMENTS
        initializeBuildingsAndApartments();
        
        // PART 3: APARTMENT RESIDENTS (Many-to-many relationships)
        initializeApartmentResidents();
        
        // PART 4: FACILITIES & SERVICE CATEGORIES
        initializeFacilitiesAndServiceCategories();
        
        // PART 5: ANNOUNCEMENTS & EVENTS
        initializeAnnouncementsAndEvents();
        
        // PART 6: FACILITY BOOKINGS
        initializeFacilityBookings();
        
        // PART 7: INVOICES & PAYMENTS
        initializeInvoicesAndPayments();
        
        // PART 8: SERVICE REQUESTS & FEEDBACK
        initializeServiceRequestsAndFeedback();
        
        // PART 9: ACTIVITY LOGS & AI QA
        initializeActivityLogsAndAiQa();
        
        // PART 10: VEHICLES
        initializeVehicles();
        
        // PART 11: EMERGENCY CONTACTS & ADDITIONAL DATA
        initializeEmergencyContactsAndAdditionalData();
        
        System.out.println("‚úÖ Comprehensive data initialization completed successfully!");
    }

    /**
     * PART 1: Initialize Roles and Users with enhanced data
     */
    private void initializeRolesAndUsers() {
        System.out.println("üë• Initializing Roles and Users...");
        
        // 1.1 Create Roles
        Role adminRole = roleRepository.save(Role.builder()
            .name("ADMIN")
            .description("Qu·∫£n tr·ªã vi√™n h·ªá th·ªëng - To√†n quy·ªÅn truy c·∫≠p v√† qu·∫£n l√Ω")
            .build());
        
        Role staffRole = roleRepository.save(Role.builder()
            .name("STAFF")
            .description("Nh√¢n vi√™n qu·∫£n l√Ω - Qu·∫£n l√Ω cƒÉn h·ªô, d·ªãch v·ª• v√† c∆∞ d√¢n")
            .build());
        
        Role residentRole = roleRepository.save(Role.builder()
            .name("RESIDENT")
            .description("C∆∞ d√¢n - S·ª≠ d·ª•ng d·ªãch v·ª•, thanh to√°n v√† b√°o c√°o s·ª± c·ªë")
            .build());
        
        Role technicianRole = roleRepository.save(Role.builder()
            .name("TECHNICIAN")
            .description("K·ªπ thu·∫≠t vi√™n - X·ª≠ l√Ω s·ª± c·ªë k·ªπ thu·∫≠t v√† b·∫£o tr√¨")
            .build());
        
        Role cleanerRole = roleRepository.save(Role.builder()
            .name("CLEANER")
            .description("Nh√¢n vi√™n v·ªá sinh - D·ªçn d·∫πp v√† b·∫£o tr√¨ v·ªá sinh")
            .build());
        
        Role securityRole = roleRepository.save(Role.builder()
            .name("SECURITY")
            .description("B·∫£o v·ªá - An ninh, tu·∫ßn tra v√† ki·ªÉm so√°t ra v√†o")
            .build());

        // 1.2 Create Enhanced Users with complete information
        List<User> users = new ArrayList<>();
        
        // Admin Users
        users.add(createUser("admin", "admin@apartment.com", "0901234567", "Nguy·ªÖn VƒÉn Admin", 
            LocalDate.of(1985, 5, 15), "123456789001", Set.of(adminRole), UserStatus.ACTIVE));
        
        users.add(createUser("manager", "manager@apartment.com", "0901234568", "Tr·∫ßn Th·ªã Manager", 
            LocalDate.of(1988, 8, 20), "123456789002", Set.of(adminRole), UserStatus.ACTIVE));
        
        // Staff Users
        users.add(createUser("staff1", "staff1@apartment.com", "0901234569", "L√™ VƒÉn Staff", 
            LocalDate.of(1990, 3, 10), "123456789003", Set.of(staffRole), UserStatus.ACTIVE));
        
        users.add(createUser("staff2", "staff2@apartment.com", "0901234570", "Ph·∫°m Th·ªã Staff", 
            LocalDate.of(1992, 7, 25), "123456789004", Set.of(staffRole), UserStatus.ACTIVE));
        
        // Resident Users with diverse information
        users.add(createUser("resident1", "nguyenvanA@gmail.com", "0901234571", "Nguy·ªÖn VƒÉn An", 
            LocalDate.of(1980, 1, 15), "123456789005", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident2", "tranthiB@gmail.com", "0901234572", "Tr·∫ßn Th·ªã B√¨nh", 
            LocalDate.of(1982, 4, 22), "123456789006", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident3", "levanC@gmail.com", "0901234573", "L√™ VƒÉn C∆∞·ªùng", 
            LocalDate.of(1985, 9, 8), "123456789007", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident4", "phamthiD@gmail.com", "0901234574", "Ph·∫°m Th·ªã Dung", 
            LocalDate.of(1987, 12, 3), "123456789008", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident5", "hoangvanE@gmail.com", "0901234575", "Ho√†ng VƒÉn Em", 
            LocalDate.of(1983, 6, 18), "123456789009", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident6", "dangthiF@gmail.com", "0901234576", "ƒê·∫∑ng Th·ªã Ph∆∞∆°ng", 
            LocalDate.of(1989, 11, 12), "123456789010", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident7", "vuthiG@gmail.com", "0901234582", "V≈© Th·ªã Giang", 
            LocalDate.of(1986, 2, 28), "123456789011", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident8", "dovanH@gmail.com", "0901234583", "ƒê·ªó VƒÉn H√πng", 
            LocalDate.of(1984, 8, 14), "123456789012", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident9", "buithiI@gmail.com", "0901234584", "B√πi Th·ªã Inh", 
            LocalDate.of(1991, 5, 7), "123456789013", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident10", "ngovanJ@gmail.com", "0901234585", "Ng√¥ VƒÉn Jinh", 
            LocalDate.of(1981, 10, 30), "123456789014", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident11", "lythiK@gmail.com", "0901234586", "L√Ω Th·ªã Kim", 
            LocalDate.of(1988, 3, 25), "123456789015", Set.of(residentRole), UserStatus.ACTIVE));
        
        users.add(createUser("resident12", "hovanL@gmail.com", "0901234587", "H·ªì VƒÉn Long", 
            LocalDate.of(1983, 7, 19), "123456789016", Set.of(residentRole), UserStatus.ACTIVE));
        
        // Technician Users
        users.add(createUser("technician1", "technician1@apartment.com", "0901234577", "Nguy·ªÖn VƒÉn K·ªπ Thu·∫≠t", 
            LocalDate.of(1985, 4, 5), "123456789017", Set.of(technicianRole), UserStatus.ACTIVE));
        
        users.add(createUser("technician2", "technician2@apartment.com", "0901234578", "Tr·∫ßn Th·ªã K·ªπ Thu·∫≠t", 
            LocalDate.of(1987, 9, 12), "123456789018", Set.of(technicianRole), UserStatus.ACTIVE));
        
        // Cleaner Users
        users.add(createUser("cleaner1", "cleaner1@apartment.com", "0901234579", "L√™ VƒÉn V·ªá Sinh", 
            LocalDate.of(1989, 1, 20), "123456789019", Set.of(cleanerRole), UserStatus.ACTIVE));
        
        users.add(createUser("cleaner2", "cleaner2@apartment.com", "0901234580", "Ph·∫°m Th·ªã V·ªá Sinh", 
            LocalDate.of(1990, 6, 8), "123456789020", Set.of(cleanerRole), UserStatus.ACTIVE));
        
        // Security Users
        users.add(createUser("security1", "security1@apartment.com", "0901234581", "Ho√†ng VƒÉn B·∫£o V·ªá", 
            LocalDate.of(1986, 12, 15), "123456789021", Set.of(securityRole), UserStatus.ACTIVE));
        
        users.add(createUser("security2", "security2@apartment.com", "0901234588", "ƒê·∫∑ng Th·ªã B·∫£o V·ªá", 
            LocalDate.of(1988, 3, 22), "123456789022", Set.of(securityRole), UserStatus.ACTIVE));
        
        // Special Status Users
        users.add(createUser("resident_locked", "locked@gmail.com", "0901234589", "Nguy·ªÖn VƒÉn Locked", 
            LocalDate.of(1990, 1, 1), "999999999999", Set.of(residentRole), UserStatus.LOCKED, "Vi ph·∫°m quy ƒë·ªãnh"));
        
        users.add(createUser("resident_inactive", "inactive@gmail.com", "0901234590", "Tr·∫ßn Th·ªã Inactive", 
            LocalDate.of(1991, 2, 2), "888888888888", Set.of(residentRole), UserStatus.INACTIVE));
        
        System.out.println("‚úÖ Created " + users.size() + " users with complete information");
    }

    /**
     * Helper method to create users with complete information
     */
    private User createUser(String username, String email, String phoneNumber, String fullName, 
                           LocalDate dateOfBirth, String idCardNumber, Set<Role> roles, UserStatus status) {
        return createUser(username, email, phoneNumber, fullName, dateOfBirth, idCardNumber, roles, status, null);
    }
    
    private User createUser(String username, String email, String phoneNumber, String fullName, 
                           LocalDate dateOfBirth, String idCardNumber, Set<Role> roles, UserStatus status, String lockReason) {
        // Check if user exists by email or phone number
        Optional<User> existingUser = userRepository.findByEmail(email)
            .or(() -> userRepository.findByPhoneNumber(phoneNumber));
        
        return existingUser.orElseGet(() -> userRepository.save(User.builder()
            .username(username)
            .email(email)
            .passwordHash(passwordEncoder.encode("password"))
            .phoneNumber(phoneNumber)
            .fullName(fullName)
            .dateOfBirth(dateOfBirth)
            .idCardNumber(idCardNumber)
            .status(status)
            .lockReason(lockReason)
            .avatarUrl(null) // Will be set later if needed
            .createdAt(LocalDateTime.now())
            .updatedAt(LocalDateTime.now())
            .roles(roles)
            .build()));
    }

    /**
     * PART 2: Initialize Buildings and Apartments with enhanced data
     */
    private void initializeBuildingsAndApartments() {
        System.out.println("üè¢ Initializing Buildings and Apartments...");
        
        // 2.1 Create Enhanced Buildings
        List<Building> buildings = new ArrayList<>();
        
        buildings.add(buildingRepository.save(Building.builder()
            .buildingName("T√≤a A - Golden Tower")
            .address("123 ƒê∆∞·ªùng ABC, Ph∆∞·ªùng 1, Qu·∫≠n 1, TP.HCM")
            .floors(25)
            .description("T√≤a nh√† cao c·∫•p v·ªõi ƒë·∫ßy ƒë·ªß ti·ªán √≠ch, view ƒë·∫πp h∆∞·ªõng s√¥ng S√†i G√≤n")
            .build()));
        
        buildings.add(buildingRepository.save(Building.builder()
            .buildingName("T√≤a B - Silver Residence")
            .address("456 ƒê∆∞·ªùng XYZ, Ph∆∞·ªùng 2, Qu·∫≠n 2, TP.HCM")
            .floors(20)
            .description("T√≤a nh√† trung c·∫•p ph√π h·ª£p gia ƒë√¨nh, g·∫ßn tr∆∞·ªùng h·ªçc v√† b·ªánh vi·ªán")
            .build()));
        
        buildings.add(buildingRepository.save(Building.builder()
            .buildingName("T√≤a C - Diamond Complex")
            .address("789 ƒê∆∞·ªùng DEF, Ph∆∞·ªùng 3, Qu·∫≠n 3, TP.HCM")
            .floors(30)
            .description("T√≤a nh√† cao c·∫•p view ƒë·∫πp, ti·ªán √≠ch ƒë·∫ßy ƒë·ªß, an ninh 24/7")
            .build()));
        
        buildings.add(buildingRepository.save(Building.builder()
            .buildingName("T√≤a D - Emerald Garden")
            .address("321 ƒê∆∞·ªùng GHI, Ph∆∞·ªùng 4, Qu·∫≠n 7, TP.HCM")
            .floors(18)
            .description("T√≤a nh√† v·ªõi kh√¥ng gian xanh, ph√π h·ª£p gia ƒë√¨nh c√≥ tr·∫ª em")
            .build()));
        
        buildings.add(buildingRepository.save(Building.builder()
            .buildingName("T√≤a E - Platinum Heights")
            .address("654 ƒê∆∞·ªùng JKL, Ph∆∞·ªùng 5, Qu·∫≠n 4, TP.HCM")
            .floors(22)
            .description("T√≤a nh√† cao c·∫•p v·ªõi view bi·ªÉn, ti·ªán √≠ch sang tr·ªçng")
            .build()));

        // 2.2 Create Diverse Apartments for each building
        List<Apartment> apartments = new ArrayList<>();
        
        // Building A - Golden Tower (25 floors)
        for (int floor = 1; floor <= 25; floor++) {
            for (int unit = 1; unit <= 4; unit++) {
                String unitNumber = "A" + String.format("%02d", floor) + "-" + String.format("%02d", unit);
                double area = 75.0 + (unit * 10.0) + (floor * 2.0); // Vary by unit and floor
                ApartmentStatus status = (floor <= 20 && unit <= 3) ? ApartmentStatus.OCCUPIED : ApartmentStatus.VACANT;
                
                apartments.add(apartmentRepository.save(Apartment.builder()
                    .buildingId(buildings.get(0).getId())
                    .floorNumber(floor)
                    .unitNumber(unitNumber)
                    .area(area)
                    .status(status)
                    .build()));
            }
        }
        
        // Building B - Silver Residence (20 floors)
        for (int floor = 1; floor <= 20; floor++) {
            for (int unit = 1; unit <= 6; unit++) {
                String unitNumber = "B" + String.format("%02d", floor) + "-" + String.format("%02d", unit);
                double area = 65.0 + (unit * 8.0) + (floor * 1.5);
                ApartmentStatus status = (floor <= 15 && unit <= 4) ? ApartmentStatus.OCCUPIED : ApartmentStatus.VACANT;
                
                apartments.add(apartmentRepository.save(Apartment.builder()
                    .buildingId(buildings.get(1).getId())
                    .floorNumber(floor)
                    .unitNumber(unitNumber)
                    .area(area)
                    .status(status)
                    .build()));
            }
        }
        
        // Building C - Diamond Complex (30 floors)
        for (int floor = 1; floor <= 30; floor++) {
            for (int unit = 1; unit <= 3; unit++) {
                String unitNumber = "C" + String.format("%02d", floor) + "-" + String.format("%02d", unit);
                double area = 90.0 + (unit * 15.0) + (floor * 3.0);
                ApartmentStatus status = (floor <= 25 && unit <= 2) ? ApartmentStatus.OCCUPIED : ApartmentStatus.VACANT;
                
                apartments.add(apartmentRepository.save(Apartment.builder()
                    .buildingId(buildings.get(2).getId())
                    .floorNumber(floor)
                    .unitNumber(unitNumber)
                    .area(area)
                    .status(status)
                    .build()));
            }
        }
        
        // Building D - Emerald Garden (18 floors)
        for (int floor = 1; floor <= 18; floor++) {
            for (int unit = 1; unit <= 5; unit++) {
                String unitNumber = "D" + String.format("%02d", floor) + "-" + String.format("%02d", unit);
                double area = 70.0 + (unit * 12.0) + (floor * 2.5);
                ApartmentStatus status = (floor <= 12 && unit <= 3) ? ApartmentStatus.OCCUPIED : ApartmentStatus.VACANT;
                
                apartments.add(apartmentRepository.save(Apartment.builder()
                    .buildingId(buildings.get(3).getId())
                    .floorNumber(floor)
                    .unitNumber(unitNumber)
                    .area(area)
                    .status(status)
                    .build()));
            }
        }
        
        // Building E - Platinum Heights (22 floors)
        for (int floor = 1; floor <= 22; floor++) {
            for (int unit = 1; unit <= 4; unit++) {
                String unitNumber = "E" + String.format("%02d", floor) + "-" + String.format("%02d", unit);
                double area = 85.0 + (unit * 13.0) + (floor * 2.8);
                ApartmentStatus status = (floor <= 18 && unit <= 3) ? ApartmentStatus.OCCUPIED : ApartmentStatus.VACANT;
                
                apartments.add(apartmentRepository.save(Apartment.builder()
                    .buildingId(buildings.get(4).getId())
                    .floorNumber(floor)
                    .unitNumber(unitNumber)
                    .area(area)
                    .status(status)
                    .build()));
            }
        }
        
        System.out.println("‚úÖ Created " + buildings.size() + " buildings and " + apartments.size() + " apartments");
    }

    /**
     * PART 3: Initialize Apartment Residents with many-to-many relationships
     */
    @Transactional
    private void initializeApartmentResidents() {
        System.out.println("üè† Initializing Apartment Residents...");
        
        // Get all users with roles using JOIN FETCH
        List<User> allUsers = userRepository.findAllWithRoles();
        Role residentRole = roleRepository.findByName("RESIDENT");
        
        if (residentRole == null) {
            System.out.println("‚ö†Ô∏è RESIDENT role not found, skipping apartment residents initialization");
            return;
        }
        
        // Get all apartments
        List<Apartment> allApartments = apartmentRepository.findAll();
        
        // Get resident users only
        List<User> residentUsers = allUsers.stream()
            .filter(user -> user.getRoles() != null && user.getRoles().contains(residentRole))
            .collect(Collectors.toList());
        
        // Get occupied apartments only
        List<Apartment> occupiedApartments = allApartments.stream()
            .filter(apt -> apt.getStatus() == ApartmentStatus.OCCUPIED)
            .collect(Collectors.toList());
        
        System.out.println("üìä Found " + residentUsers.size() + " resident users and " + occupiedApartments.size() + " occupied apartments");
        
        // Create diverse apartment-resident relationships
        int relationshipCount = 0;
        
        // 3.1 Primary Residents (One primary resident per apartment)
        for (int i = 0; i < Math.min(residentUsers.size(), occupiedApartments.size()); i++) {
            User resident = residentUsers.get(i);
            Apartment apartment = occupiedApartments.get(i);
            
            // Create primary resident relationship
            ApartmentResident primaryResident = ApartmentResident.builder()
                .id(new ApartmentResidentId(apartment.getId(), resident.getId()))
                .apartment(apartment)
                .user(resident)
                .moveInDate(LocalDate.now().minusMonths(6 + (i % 12))) // Vary move-in dates
                .relationType(RelationType.OWNER)
                .isPrimaryResident(true)
                .build();
            
            apartmentResidentRepository.save(primaryResident);
            relationshipCount++;
            
            // 3.2 Add secondary residents (family members, tenants) for some apartments
            if (i % 3 == 0 && i + 1 < residentUsers.size()) {
                User secondaryResident = residentUsers.get((i + 1) % residentUsers.size());
                
                // Family member
                ApartmentResident familyMember = ApartmentResident.builder()
                    .id(new ApartmentResidentId(apartment.getId(), secondaryResident.getId()))
                    .apartment(apartment)
                    .user(secondaryResident)
                    .moveInDate(LocalDate.now().minusMonths(2))
                    .relationType(RelationType.FAMILY_MEMBER)
                    .isPrimaryResident(false)
                    .build();
                
                apartmentResidentRepository.save(familyMember);
                relationshipCount++;
            }
            
            // 3.3 Add tenants for some apartments (co-owners)
            if (i % 4 == 0 && i + 2 < residentUsers.size()) {
                User tenant = residentUsers.get((i + 2) % residentUsers.size());
                
                ApartmentResident tenantResident = ApartmentResident.builder()
                    .id(new ApartmentResidentId(apartment.getId(), tenant.getId()))
                    .apartment(apartment)
                    .user(tenant)
                    .moveInDate(LocalDate.now().minusMonths(3))
                    .relationType(RelationType.TENANT)
                    .isPrimaryResident(false)
                    .build();
                
                apartmentResidentRepository.save(tenantResident);
                relationshipCount++;
            }
        }
        
        // 3.4 Create additional relationships for some residents (multiple apartments)
        for (int i = 0; i < residentUsers.size() / 3; i++) {
            User resident = residentUsers.get(i);
            
            // Find available apartments for this resident
            List<Apartment> availableApartments = occupiedApartments.stream()
                .filter(apt -> !apartmentResidentRepository.findByApartment_Id(apt.getId()).stream()
                    .anyMatch(ar -> ar.getUser().getId().equals(resident.getId())))
                .collect(Collectors.toList());
            
            if (!availableApartments.isEmpty()) {
                Apartment secondApartment = availableApartments.get(0);
                
                ApartmentResident secondResidence = ApartmentResident.builder()
                    .id(new ApartmentResidentId(secondApartment.getId(), resident.getId()))
                    .apartment(secondApartment)
                    .user(resident)
                    .moveInDate(LocalDate.now().minusMonths(1))
                    .relationType(RelationType.TENANT)
                    .isPrimaryResident(false)
                    .build();
                
                apartmentResidentRepository.save(secondResidence);
                relationshipCount++;
            }
        }
        
        System.out.println("‚úÖ Created " + relationshipCount + " apartment-resident relationships");
    }

    /**
     * PART 4: Initialize Facilities and Service Categories
     */
    private void initializeFacilitiesAndServiceCategories() {
        System.out.println("üèãÔ∏è Initializing Facilities and Service Categories...");
        
        // 4.1 Create Enhanced Facilities
        List<Facility> facilities = new ArrayList<>();
        
        // Sports & Fitness Facilities
        facilities.add(facilityRepository.save(Facility.builder()
            .name("Ph√≤ng Gym Premium")
            .description("Ph√≤ng t·∫≠p th·ªÉ d·ª•c v·ªõi ƒë·∫ßy ƒë·ªß thi·∫øt b·ªã hi·ªán ƒë·∫°i, c√≥ hu·∫•n luy·ªán vi√™n c√° nh√¢n")
            .location("T·∫ßng 1 - T√≤a A")
            .capacity(30)
            .otherDetails("M·ªü c·ª≠a 6:00-22:00, c√≥ ph√≤ng thay ƒë·ªì, t·ªß kh√≥a, v√≤i sen")
            .usageFee(80000.0)
            .openingHours("06:00 - 22:00")
            .build()));
        
        facilities.add(facilityRepository.save(Facility.builder()
            .name("H·ªì b∆°i Olympic")
            .description("H·ªì b∆°i ngo√†i tr·ªùi v·ªõi view ƒë·∫πp, c√≥ c·ª©u h·ªô chuy√™n nghi·ªáp")
            .location("Khu v·ª±c ngo√†i tr·ªùi - T·∫ßng tr·ªát")
            .capacity(50)
            .otherDetails("M·ªü c·ª≠a 6:00-21:00, c√≥ gh·∫ø t·∫Øm n·∫Øng, qu√°n bar b√™n h·ªì")
            .usageFee(120000.0)
            .openingHours("06:00 - 21:00")
            .build()));
        
        facilities.add(facilityRepository.save(Facility.builder()
            .name("S√¢n tennis chuy√™n nghi·ªáp")
            .description("S√¢n tennis ngo√†i tr·ªùi ch·∫•t l∆∞·ª£ng cao v·ªõi ƒë√®n chi·∫øu s√°ng")
            .location("Khu v·ª±c ngo√†i tr·ªùi - T·∫ßng tr·ªát")
            .capacity(8)
            .otherDetails("C√≥ ƒë√®n chi·∫øu s√°ng, c√≥ th·ªÉ ch∆°i ban ƒë√™m, c√≥ m√°y b√°n n∆∞·ªõc")
            .usageFee(100000.0)
            .openingHours("06:00 - 22:00")
            .build()));
        
        facilities.add(facilityRepository.save(Facility.builder()
            .name("S√¢n b√≥ng r·ªï")
            .description("S√¢n b√≥ng r·ªï ngo√†i tr·ªùi v·ªõi ƒë√®n chi·∫øu s√°ng")
            .location("Khu v·ª±c ngo√†i tr·ªùi - T·∫ßng tr·ªát")
            .capacity(20)
            .otherDetails("C√≥ ƒë√®n chi·∫øu s√°ng, c√≥ m√°i che, ph√π h·ª£p cho tr·∫ª em v√† ng∆∞·ªùi l·ªõn")
            .usageFee(60000.0)
            .openingHours("06:00 - 22:00")
            .build()));
        
        // Community & Entertainment Facilities
        facilities.add(facilityRepository.save(Facility.builder()
            .name("Ph√≤ng sinh ho·∫°t c·ªông ƒë·ªìng")
            .description("Ph√≤ng ƒëa nƒÉng cho c√°c ho·∫°t ƒë·ªông c·ªông ƒë·ªìng, ti·ªác t√πng")
            .location("T·∫ßng 1 - T√≤a C")
            .capacity(100)
            .otherDetails("C√≥ s√¢n kh·∫•u, √¢m thanh √°nh s√°ng, b√†n gh·∫ø, nh√† b·∫øp")
            .usageFee(30000.0)
            .openingHours("08:00 - 22:00")
            .build()));
        
        facilities.add(facilityRepository.save(Facility.builder()
            .name("Ph√≤ng h·ªçp ƒëa nƒÉng")
            .description("Ph√≤ng h·ªçp ƒëa nƒÉng cho c∆∞ d√¢n, c√≥ m√°y chi·∫øu v√† √¢m thanh")
            .location("T·∫ßng 2 - T√≤a B")
            .capacity(40)
            .otherDetails("C√≥ m√°y chi·∫øu, √¢m thanh, b√†n gh·∫ø, wifi mi·ªÖn ph√≠")
            .usageFee(50000.0)
            .openingHours("08:00 - 20:00")
            .build()));
        
        facilities.add(facilityRepository.save(Facility.builder()
            .name("Khu BBQ ngo√†i tr·ªùi")
            .description("Khu v·ª±c n∆∞·ªõng BBQ ngo√†i tr·ªùi v·ªõi view ƒë·∫πp")
            .location("Khu v·ª±c ngo√†i tr·ªùi - T·∫ßng tr·ªát")
            .capacity(50)
            .otherDetails("C√≥ b√†n gh·∫ø, l√≤ n∆∞·ªõng, b·∫øp gas, qu√°n bar")
            .usageFee(80000.0)
            .openingHours("16:00 - 22:00")
            .build()));
        
        facilities.add(facilityRepository.save(Facility.builder()
            .name("Khu vui ch∆°i tr·∫ª em")
            .description("S√¢n ch∆°i an to√†n cho tr·∫ª em v·ªõi nhi·ªÅu tr√≤ ch∆°i")
            .location("Khu v·ª±c ngo√†i tr·ªùi - T·∫ßng tr·ªát")
            .capacity(30)
            .otherDetails("C√≥ ƒë·ªì ch∆°i, c√≥ gh·∫ø ng·ªìi cho ph·ª• huynh, c√≥ m√°i che")
            .usageFee(40000.0)
            .openingHours("06:00 - 20:00")
            .build()));
        
        facilities.add(facilityRepository.save(Facility.builder()
            .name("Spa & Massage")
            .description("Spa v√† massage th∆∞ gi√£n cho c∆∞ d√¢n")
            .location("T·∫ßng 1 - T√≤a B")
            .capacity(10)
            .otherDetails("C√≥ ph√≤ng massage, spa, sauna, c√≥ nh√¢n vi√™n chuy√™n nghi·ªáp")
            .usageFee(200000.0)
            .openingHours("09:00 - 21:00")
            .build()));
        
        facilities.add(facilityRepository.save(Facility.builder()
            .name("B√£i ƒë·ªó xe c√≥ m√°i che")
            .description("B√£i ƒë·ªó xe c√≥ m√°i che, an to√†n cho xe c∆∞ d√¢n")
            .location("T·∫ßng h·∫ßm - T√≤a A")
            .capacity(200)
            .otherDetails("Mi·ªÖn ph√≠ cho c∆∞ d√¢n, c√≥ camera gi√°m s√°t, c√≥ b·∫£o v·ªá")
            .usageFee(10000.0)
            .openingHours("24/7")
            .build()));
        
        // 4.2 Create Service Categories (only if they don't exist)
        List<ServiceCategory> serviceCategories = new ArrayList<>();
        
        // Create service categories only if they don't exist
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("ELECTRICITY")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("ELECTRICITY")
                .categoryName("ƒêi·ªán")
                .assignedRole("TECHNICIAN")
                .description("S·ª≠a ch·ªØa ƒëi·ªán, thay b√≥ng ƒë√®n, ·ªï c·∫Øm, c√¥ng t·∫Øc, t·ªß ƒëi·ªán")
                .build())));
        
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("PLUMBING")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("PLUMBING")
                .categoryName("N∆∞·ªõc")
                .assignedRole("TECHNICIAN")
                .description("S·ª≠a ·ªëng n∆∞·ªõc, v√≤i n∆∞·ªõc, b·ªìn c·∫ßu, b·ªìn r·ª≠a, m√°y b∆°m n∆∞·ªõc")
                .build())));
        
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("CLEANING")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("CLEANING")
                .categoryName("V·ªá sinh")
                .assignedRole("CLEANER")
                .description("D·ªçn d·∫πp, lau ch√πi, v·ªá sinh chung, thu gom r√°c")
                .build())));
        
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("SECURITY")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("SECURITY")
                .categoryName("An ninh")
                .assignedRole("SECURITY")
                .description("Tu·∫ßn tra, ki·ªÉm tra an ninh, x·ª≠ l√Ω s·ª± c·ªë, qu·∫£n l√Ω ra v√†o")
                .build())));
        
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("HVAC")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("HVAC")
                .categoryName("ƒêi·ªÅu h√≤a")
                .assignedRole("TECHNICIAN")
                .description("B·∫£o tr√¨, s·ª≠a ch·ªØa ƒëi·ªÅu h√≤a, th√¥ng gi√≥, l·ªçc kh√¥ng kh√≠")
                .build())));
        
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("ELEVATOR")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("ELEVATOR")
                .categoryName("Thang m√°y")
                .assignedRole("TECHNICIAN")
                .description("B·∫£o tr√¨, s·ª≠a ch·ªØa thang m√°y, ki·ªÉm tra an to√†n")
                .build())));
        
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("GARDENING")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("GARDENING")
                .categoryName("C√¢y xanh")
                .assignedRole("CLEANER")
                .description("ChƒÉm s√≥c c√¢y xanh, c·∫Øt t·ªâa, t∆∞·ªõi n∆∞·ªõc, b√≥n ph√¢n")
                .build())));
        
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("INTERNET")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("INTERNET")
                .categoryName("Internet & IT")
                .assignedRole("TECHNICIAN")
                .description("S·ª≠a ch·ªØa m·∫°ng internet, wifi, camera, h·ªá th·ªëng IT")
                .build())));
        
        serviceCategories.add(serviceCategoryRepository.findByCategoryCode("GENERAL")
            .orElseGet(() -> serviceCategoryRepository.save(ServiceCategory.builder()
                .categoryCode("GENERAL")
                .categoryName("Kh√°c")
                .assignedRole("STAFF")
                .description("C√°c y√™u c·∫ßu kh√°c kh√¥ng thu·ªôc danh m·ª•c tr√™n")
                .build())));
        
        System.out.println("‚úÖ Created " + facilities.size() + " facilities and " + serviceCategories.size() + " service categories");
    }

    /**
     * PART 5: Initialize Announcements and Events
     */
    private void initializeAnnouncementsAndEvents() {
        System.out.println("üì¢ Initializing Announcements and Events...");
        
        // Get admin user for creating announcements
        User adminUser = userRepository.findByUsername("admin")
            .orElseThrow(() -> new RuntimeException("Admin user not found"));
        
        // 5.1 Create Diverse Announcements
        List<Announcement> announcements = new ArrayList<>();
        
        // Regular Announcements
        announcements.add(announcementRepository.save(Announcement.builder()
            .title("Th√¥ng b√°o b·∫£o tr√¨ thang m√°y t√≤a A")
            .content("Thang m√°y t√≤a A s·∫Ω ƒë∆∞·ª£c b·∫£o tr√¨ ƒë·ªãnh k·ª≥ t·ª´ 8:00-12:00 ng√†y 15/12/2024. Vui l√≤ng s·ª≠ d·ª•ng thang m√°y kh√°c trong th·ªùi gian n√†y. Ch√∫ng t√¥i xin l·ªói v√¨ s·ª± b·∫•t ti·ªán n√†y.")
            .type("REGULAR")
            .targetAudience("ALL")
            .createdBy(adminUser.getId())
            .isActive(true)
            .build()));
        
        announcements.add(announcementRepository.save(Announcement.builder()
            .title("Th√¥ng b√°o v·ªÅ ph√≠ d·ªãch v·ª• th√°ng 12/2024")
            .content("Ph√≠ d·ªãch v·ª• th√°ng 12/2024 s·∫Ω tƒÉng 5% do chi ph√≠ ƒëi·ªán n∆∞·ªõc tƒÉng. Vui l√≤ng thanh to√°n ƒë√∫ng h·∫°n ƒë·ªÉ tr√°nh ph√≠ tr·ªÖ h·∫°n. Chi ti·∫øt xem trong ph·∫ßn h√≥a ƒë∆°n.")
            .type("REGULAR")
            .targetAudience("ALL")
            .createdBy(adminUser.getId())
            .isActive(true)
            .build()));
        
        announcements.add(announcementRepository.save(Announcement.builder()
            .title("Th√¥ng b√°o v·ªÅ d·ªãch v·ª• v·ªá sinh")
            .content("D·ªãch v·ª• v·ªá sinh s·∫Ω ƒë∆∞·ª£c th·ª±c hi·ªán v√†o th·ª© 2 v√† th·ª© 6 h√†ng tu·∫ßn. Vui l√≤ng ƒë·ªÉ r√°c ƒë√∫ng n∆°i quy ƒë·ªãnh v√† kh√¥ng ƒë·ªÉ r√°c ·ªü h√†nh lang.")
            .type("REGULAR")
            .targetAudience("ALL")
            .createdBy(adminUser.getId())
            .isActive(true)
            .build()));
        
        // Urgent Announcements
        announcements.add(announcementRepository.save(Announcement.builder()
            .title("TH√îNG B√ÅO KH·∫®N: M·∫•t ƒëi·ªán b·∫£o tr√¨")
            .content("S·∫Ω c√≥ k·∫ø ho·∫°ch c·∫Øt ƒëi·ªán b·∫£o tr√¨ t·ª´ 22:00-06:00 ng√†y 20/12/2024. Vui l√≤ng chu·∫©n b·ªã ƒë√®n pin v√† c√°c thi·∫øt b·ªã c·∫ßn thi·∫øt. ƒêi·ªán s·∫Ω ƒë∆∞·ª£c kh√¥i ph·ª•c s·ªõm nh·∫•t c√≥ th·ªÉ.")
            .type("URGENT")
            .targetAudience("ALL")
            .createdBy(adminUser.getId())
            .isActive(true)
            .build()));
        
        announcements.add(announcementRepository.save(Announcement.builder()
            .title("TH√îNG B√ÅO KH·∫®N: B·∫£o m·∫≠t an ninh")
            .content("Vui l√≤ng ƒë√≥ng c·ª≠a c·∫©n th·∫≠n v√† kh√¥ng cho ng∆∞·ªùi l·∫° v√†o t√≤a nh√†. B√°o c√°o ngay n·∫øu th·∫•y h√†nh vi ƒë√°ng ng·ªù. S·ªë ƒëi·ªán tho·∫°i b·∫£o v·ªá: 0901234567")
            .type("URGENT")
            .targetAudience("ALL")
            .createdBy(adminUser.getId())
            .isActive(true)
            .build()));
        
        // Event Announcements
        announcements.add(announcementRepository.save(Announcement.builder()
            .title("S·ª± ki·ªán T·∫øt 2025 - Ch∆∞∆°ng tr√¨nh ƒë√≥n nƒÉm m·ªõi")
            .content("Ch∆∞∆°ng tr√¨nh ƒë√≥n T·∫øt 2025 s·∫Ω di·ªÖn ra t·∫°i s·∫£nh ch√≠nh t·ª´ 18:00-22:00 ng√†y 30/12/2024. C√≥ m√∫a l√¢n, ·∫©m th·ª±c truy·ªÅn th·ªëng, v√† nhi·ªÅu ho·∫°t ƒë·ªông vui nh·ªôn. M·ªùi t·∫•t c·∫£ c∆∞ d√¢n tham gia!")
            .type("EVENT")
            .targetAudience("ALL")
            .createdBy(adminUser.getId())
            .isActive(true)
            .build()));
        
        announcements.add(announcementRepository.save(Announcement.builder()
            .title("Th√¥ng b√°o v·ªÅ d·ªãch v·ª• internet")
            .content("D·ªãch v·ª• internet s·∫Ω ƒë∆∞·ª£c n√¢ng c·∫•p v√†o ng√†y 28/12/2024. C√≥ th·ªÉ b·ªã gi√°n ƒëo·∫°n t·ª´ 2:00-4:00 s√°ng. T·ªëc ƒë·ªô internet s·∫Ω ƒë∆∞·ª£c c·∫£i thi·ªán ƒë√°ng k·ªÉ sau n√¢ng c·∫•p.")
            .type("REGULAR")
            .targetAudience("ALL")
            .createdBy(adminUser.getId())
            .isActive(true)
            .build()));
        
        announcements.add(announcementRepository.save(Announcement.builder()
            .title("Th√¥ng b√°o v·ªÅ b·∫£o tr√¨ h·ªá th·ªëng n∆∞·ªõc")
            .content("H·ªá th·ªëng n∆∞·ªõc s·∫Ω ƒë∆∞·ª£c b·∫£o tr√¨ t·ª´ 14:00-18:00 ng√†y 25/12/2024. Vui l√≤ng d·ª± tr·ªØ n∆∞·ªõc ƒë·ªß d√πng trong th·ªùi gian n√†y. N∆∞·ªõc s·∫Ω ƒë∆∞·ª£c kh√¥i ph·ª•c s·ªõm nh·∫•t c√≥ th·ªÉ.")
            .type("REGULAR")
            .targetAudience("ALL")
            .createdBy(adminUser.getId())
            .isActive(true)
            .build()));
        
        // 5.2 Create Diverse Events
        List<Event> events = new ArrayList<>();
        
        events.add(eventRepository.save(Event.builder()
            .title("Ti·ªác Gi√°ng sinh 2024 - Gala Dinner")
            .description("Ti·ªác Gi√°ng sinh sang tr·ªçng cho c∆∞ d√¢n v·ªõi nhi·ªÅu ho·∫°t ƒë·ªông vui nh·ªôn, ·∫©m th·ª±c ƒëa d·∫°ng v√† ch∆∞∆°ng tr√¨nh vƒÉn ngh·ªá ƒë·∫∑c s·∫Øc")
            .startTime(LocalDateTime.of(2024, 12, 24, 18, 0))
            .endTime(LocalDateTime.of(2024, 12, 24, 22, 0))
            .location("S·∫£nh ch√≠nh t√≤a A - Golden Tower")
            .build()));
        
        events.add(eventRepository.save(Event.builder()
            .title("H·ªçp c∆∞ d√¢n th√°ng 12 - Th·∫£o lu·∫≠n quy ho·∫°ch 2025")
            .description("H·ªçp c∆∞ d√¢n ƒë·ªãnh k·ª≥ ƒë·ªÉ th·∫£o lu·∫≠n c√°c v·∫•n ƒë·ªÅ chung, quy ho·∫°ch c·∫£i ti·∫øn v√† nghe √Ω ki·∫øn ph·∫£n h·ªìi t·ª´ c∆∞ d√¢n")
            .startTime(LocalDateTime.of(2024, 12, 15, 19, 0))
            .endTime(LocalDateTime.of(2024, 12, 15, 21, 0))
            .location("Ph√≤ng sinh ho·∫°t c·ªông ƒë·ªìng")
            .build()));
        
        events.add(eventRepository.save(Event.builder()
            .title("L·ªõp yoga mi·ªÖn ph√≠ - S√°ng ch·ªß nh·∫≠t")
            .description("L·ªõp yoga mi·ªÖn ph√≠ cho c∆∞ d√¢n m·ªói s√°ng Ch·ªß nh·∫≠t, ph√π h·ª£p cho m·ªçi l·ª©a tu·ªïi, c√≥ hu·∫•n luy·ªán vi√™n chuy√™n nghi·ªáp")
            .startTime(LocalDateTime.of(2024, 12, 22, 7, 0))
            .endTime(LocalDateTime.of(2024, 12, 22, 8, 30))
            .location("Ph√≤ng gym - T·∫ßng 2")
            .build()));
        
        events.add(eventRepository.save(Event.builder()
            .title("Workshop n·∫•u ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam")
            .description("Workshop n·∫•u ƒÉn truy·ªÅn th·ªëng Vi·ªát Nam v·ªõi c√°c m√≥n ƒÉn ƒë·∫∑c tr∆∞ng, c√≥ ƒë·∫ßu b·∫øp chuy√™n nghi·ªáp h∆∞·ªõng d·∫´n")
            .startTime(LocalDateTime.of(2024, 12, 28, 14, 0))
            .endTime(LocalDateTime.of(2024, 12, 28, 17, 0))
            .location("Khu BBQ ngo√†i tr·ªùi")
            .build()));
        
        events.add(eventRepository.save(Event.builder()
            .title("Gi·∫£i tennis c∆∞ d√¢n 2025 - M√πa gi·∫£i m·ªõi")
            .description("Gi·∫£i ƒë·∫•u tennis th∆∞·ªùng ni√™n cho c∆∞ d√¢n v·ªõi nhi·ªÅu h·∫°ng m·ª•c thi ƒë·∫•u, c√≥ gi·∫£i th∆∞·ªüng h·∫•p d·∫´n")
            .startTime(LocalDateTime.of(2025, 7, 1, 8, 0))
            .endTime(LocalDateTime.of(2025, 12, 31, 18, 0))
            .location("S√¢n tennis chuy√™n nghi·ªáp")
            .build()));
        
        events.add(eventRepository.save(Event.builder()
            .title("L·ªõp h·ªçc n·∫•u ƒÉn - M√≥n ƒÉn ch√¢u √Å")
            .description("L·ªõp h·ªçc n·∫•u ƒÉn ch√¢u √Å v·ªõi c√°c m√≥n ƒÉn t·ª´ Nh·∫≠t B·∫£n, H√†n Qu·ªëc, Th√°i Lan v√† Trung Qu·ªëc")
            .startTime(LocalDateTime.of(2025, 1, 15, 14, 0))
            .endTime(LocalDateTime.of(2025, 1, 15, 17, 0))
            .location("Ph√≤ng sinh ho·∫°t c·ªông ƒë·ªìng")
            .build()));
        
        events.add(eventRepository.save(Event.builder()
            .title("H·ªçp c∆∞ d√¢n th√°ng 1/2025 - K·∫ø ho·∫°ch nƒÉm m·ªõi")
            .description("H·ªçp c∆∞ d√¢n ƒë·ªãnh k·ª≥ ƒë·ªÉ th·∫£o lu·∫≠n k·∫ø ho·∫°ch nƒÉm m·ªõi, c·∫£i ti·∫øn d·ªãch v·ª• v√† nghe √Ω ki·∫øn ph·∫£n h·ªìi")
            .startTime(LocalDateTime.of(2025, 1, 15, 19, 0))
            .endTime(LocalDateTime.of(2025, 1, 15, 21, 0))
            .location("Ph√≤ng h·ªçp ƒëa nƒÉng")
            .build()));
        
        events.add(eventRepository.save(Event.builder()
            .title("Ti·ªác m·ª´ng nƒÉm m·ªõi 2025 - Countdown Party")
            .description("Ti·ªác m·ª´ng nƒÉm m·ªõi 2025 v·ªõi ch∆∞∆°ng tr√¨nh countdown, √¢m nh·∫°c s√¥i ƒë·ªông v√† nhi·ªÅu ho·∫°t ƒë·ªông vui nh·ªôn")
            .startTime(LocalDateTime.of(2025, 1, 1, 18, 0))
            .endTime(LocalDateTime.of(2025, 1, 1, 23, 0))
            .location("S·∫£nh ch√≠nh t√≤a A - Golden Tower")
            .build()));
        
        events.add(eventRepository.save(Event.builder()
            .title("H·ªôi th·∫£o b·∫£o m·∫≠t an ninh - Di·ªÖn ra 3 ng√†y")
            .description("H·ªôi th·∫£o v·ªÅ b·∫£o m·∫≠t an ninh cho c∆∞ d√¢n v·ªõi c√°c chuy√™n gia, di·ªÖn ra trong 3 ng√†y li√™n ti·∫øp")
            .startTime(LocalDateTime.of(2025, 2, 10, 9, 0))
            .endTime(LocalDateTime.of(2025, 2, 12, 17, 0))
            .location("Ph√≤ng h·ªçp ƒëa nƒÉng - T·∫ßng 1")
            .build()));
        
        System.out.println("‚úÖ Created " + announcements.size() + " announcements and " + events.size() + " events");
    }

    /**
     * PART 6: Initialize Facility Bookings
     */
    private void initializeFacilityBookings() {
        System.out.println("üìÖ Initializing Facility Bookings...");
        
        // Get all facilities and resident users
        List<Facility> facilities = facilityRepository.findAll();
        List<User> residentUsers = userRepository.findAllWithRoles().stream()
            .filter(user -> user.getRoles() != null && user.getRoles().stream().anyMatch(role -> "RESIDENT".equals(role.getName())))
            .collect(Collectors.toList());
        
        if (facilities.isEmpty() || residentUsers.isEmpty()) {
            System.out.println("‚ö†Ô∏è No facilities or resident users found, skipping facility bookings");
            return;
        }
        
        // 6.1 Create Diverse Facility Bookings
        List<FacilityBooking> bookings = new ArrayList<>();
        
        // Past bookings (completed)
        for (int i = 0; i < Math.min(10, residentUsers.size()); i++) {
            User resident = residentUsers.get(i);
            Facility facility = facilities.get(i % facilities.size());
            
            // Past booking - completed
            bookings.add(facilityBookingRepository.save(FacilityBooking.builder()
                .facility(facility)
                .user(resident)
                .bookingTime(LocalDateTime.now().minusDays(7 + i))
                .duration(60)
                .status(FacilityBookingStatus.CONFIRMED)
                .numberOfPeople(2 + (i % 4))
                .build()));
            
            // Past booking - rejected
            if (i % 3 == 0) {
                bookings.add(facilityBookingRepository.save(FacilityBooking.builder()
                    .facility(facility)
                    .user(resident)
                    .bookingTime(LocalDateTime.now().minusDays(5 + i))
                    .duration(90)
                    .status(FacilityBookingStatus.REJECTED)
                    .numberOfPeople(3 + (i % 3))
                    .build()));
            }
        }
        
        // Current bookings (pending/confirmed)
        for (int i = 0; i < Math.min(15, residentUsers.size()); i++) {
            User resident = residentUsers.get(i);
            Facility facility = facilities.get((i + 1) % facilities.size());
            
            // Current booking - pending
            bookings.add(facilityBookingRepository.save(FacilityBooking.builder()
                .facility(facility)
                .user(resident)
                .bookingTime(LocalDateTime.now().plusDays(1 + i))
                .duration(120)
                .status(FacilityBookingStatus.PENDING)
                .numberOfPeople(4 + (i % 3))
                .build()));
            
            // Current booking - confirmed
            if (i % 2 == 0) {
                bookings.add(facilityBookingRepository.save(FacilityBooking.builder()
                    .facility(facility)
                    .user(resident)
                    .bookingTime(LocalDateTime.now().plusDays(2 + i))
                    .duration(180)
                    .status(FacilityBookingStatus.CONFIRMED)
                    .numberOfPeople(6 + (i % 4))
                    .build()));
            }
        }
        
        // Future bookings (upcoming)
        for (int i = 0; i < Math.min(20, residentUsers.size()); i++) {
            User resident = residentUsers.get(i);
            Facility facility = facilities.get((i + 2) % facilities.size());
            
            // Future booking - confirmed
            bookings.add(facilityBookingRepository.save(FacilityBooking.builder()
                .facility(facility)
                .user(resident)
                .bookingTime(LocalDateTime.now().plusDays(7 + i))
                .duration(240)
                .status(FacilityBookingStatus.CONFIRMED)
                .numberOfPeople(8 + (i % 5))
                .build()));
            
            // Future booking - pending
            if (i % 3 == 0) {
                bookings.add(facilityBookingRepository.save(FacilityBooking.builder()
                    .facility(facility)
                    .user(resident)
                    .bookingTime(LocalDateTime.now().plusDays(10 + i))
                    .duration(300)
                    .status(FacilityBookingStatus.PENDING)
                    .numberOfPeople(10 + (i % 6))
                    .build()));
            }
        }
        
        // Special bookings (large groups, special events)
        for (int i = 0; i < Math.min(5, residentUsers.size()); i++) {
            User resident = residentUsers.get(i);
            Facility facility = facilities.get(0); // Community room for large events
            
            // Large group booking
            bookings.add(facilityBookingRepository.save(FacilityBooking.builder()
                .facility(facility)
                .user(resident)
                .bookingTime(LocalDateTime.now().plusDays(15 + i))
                .duration(480) // 8 hours
                .status(FacilityBookingStatus.CONFIRMED)
                .numberOfPeople(20 + (i * 5))
                .build()));
        }
        
        // Rejected bookings
        for (int i = 0; i < Math.min(8, residentUsers.size()); i++) {
            User resident = residentUsers.get(i);
            Facility facility = facilities.get((i + 3) % facilities.size());
            
            bookings.add(facilityBookingRepository.save(FacilityBooking.builder()
                .facility(facility)
                .user(resident)
                .bookingTime(LocalDateTime.now().plusDays(3 + i))
                .duration(60)
                .status(FacilityBookingStatus.REJECTED)
                .numberOfPeople(2)
                .build()));
        }
        
        System.out.println("‚úÖ Created " + bookings.size() + " facility bookings with diverse scenarios");
    }

    /**
     * PART 7: Initialize Invoices and Payments
     */
    private void initializeInvoicesAndPayments() {
        System.out.println("üí∞ Initializing Invoices and Payments...");
        
        // Get all apartments with residents
        List<Apartment> apartmentsWithResidents = apartmentRepository.findAll().stream()
            .filter(apt -> !apartmentResidentRepository.findByApartment_Id(apt.getId()).isEmpty())
            .collect(Collectors.toList());
        
        if (apartmentsWithResidents.isEmpty()) {
            System.out.println("‚ö†Ô∏è No apartments with residents found, skipping invoices");
            return;
        }
        
        // 7.1 Create Diverse Invoices for each apartment
        List<Invoice> invoices = new ArrayList<>();
        
        for (Apartment apartment : apartmentsWithResidents) {
            // Create invoices for different billing periods
            String[] billingPeriods = {"2024-11", "2024-10", "2024-09", "2024-08", "2024-07"};
            InvoiceStatus[] statuses = {InvoiceStatus.UNPAID, InvoiceStatus.PAID, InvoiceStatus.OVERDUE, InvoiceStatus.PAID, InvoiceStatus.PAID};
            
            for (int i = 0; i < billingPeriods.length; i++) {
                // Check if invoice already exists
                boolean hasInvoice = invoiceRepository.findByApartmentIdAndBillingPeriod(apartment.getId(), billingPeriods[i]).isPresent();
                
                if (!hasInvoice) {
                    double baseAmount = 800000.0 + (apartment.getArea() * 1000) + (i * 50000);
                    double paidAmount = statuses[i] == InvoiceStatus.PAID ? baseAmount : (statuses[i] == InvoiceStatus.OVERDUE ? baseAmount * 0.7 : 0);
                    double remainingAmount = baseAmount - paidAmount;
                    
                    Invoice invoice = invoiceRepository.save(Invoice.builder()
                        .apartmentId(apartment.getId())
                        .billingPeriod(billingPeriods[i])
                        .issueDate(LocalDate.of(2024, 11 - i, 1))
                        .dueDate(LocalDate.of(2024, 11 - i, 15))
                        .totalAmount(baseAmount)
                        .status(statuses[i])
                        .build());
                    
                    invoices.add(invoice);
                    
                    // 7.2 Create Invoice Items for each invoice
                    createInvoiceItems(invoice, apartment.getArea());
                }
            }
        }
        
        // 7.3 Create Payment Records for paid invoices
        List<Payment> payments = new ArrayList<>();
        
        for (Invoice invoice : invoices) {
            if (invoice.getStatus() == InvoiceStatus.PAID) {
                // Create payment record
                Payment payment = paymentRepository.save(Payment.builder()
                    .invoice(invoice)
                    .paidByUserId(invoice.getApartmentId()) // Using apartment ID as user ID for simplicity
                    .amount(invoice.getTotalAmount())
                    .method(PaymentMethod.BANK_TRANSFER)
                    .status(PaymentStatus.SUCCESS)
                    .referenceCode("PAY" + System.currentTimeMillis())
                    .build());
                
                payments.add(payment);
            }
        }
        
        System.out.println("‚úÖ Created " + invoices.size() + " invoices and " + payments.size() + " payments");
    }
    
    /**
     * Helper method to create invoice items
     */
    private void createInvoiceItems(Invoice invoice, double apartmentArea) {
        // Create diverse invoice items
        String[] feeTypes = {"ELECTRICITY", "WATER", "PARKING", "INTERNET", "MAINTENANCE", "CLEANING", "SECURITY", "GARDENING"};
        String[] descriptions = {
            "Ph√≠ ƒëi·ªán sinh ho·∫°t",
            "Ph√≠ n∆∞·ªõc sinh ho·∫°t", 
            "Ph√≠ gi·ªØ xe th√°ng",
            "Ph√≠ internet v√† truy·ªÅn h√¨nh",
            "Ph√≠ b·∫£o tr√¨ chung",
            "Ph√≠ v·ªá sinh chung",
            "Ph√≠ an ninh",
            "Ph√≠ chƒÉm s√≥c c√¢y xanh"
        };
        
        double[] baseAmounts = {300000.0, 200000.0, 150000.0, 100000.0, 250000.0, 180000.0, 120000.0, 80000.0};
        
        for (int i = 0; i < feeTypes.length; i++) {
            double amount = baseAmounts[i] + (apartmentArea * 50) + (Math.random() * 50000);
            
            invoiceItemRepository.save(InvoiceItem.builder()
                .invoice(invoice)
                .feeType(feeTypes[i])
                .description(descriptions[i])
                .amount(amount)
                .build());
        }
    }

    /**
     * PART 8: Initialize Service Requests and Feedback
     */
    private void initializeServiceRequestsAndFeedback() {
        System.out.println("üîß Initializing Service Requests and Feedback...");
        
        // Get all users and service categories
        List<User> allUsers = userRepository.findAllWithRoles();
        List<ServiceCategory> serviceCategories = serviceCategoryRepository.findAll();
        
        if (serviceCategories.isEmpty()) {
            System.out.println("‚ö†Ô∏è No service categories found, skipping service requests");
            return;
        }
        
        // 8.1 Create Diverse Service Requests
        List<ServiceRequest> serviceRequests = new ArrayList<>();
        
        // Get resident users
        List<User> residentUsers = allUsers.stream()
            .filter(user -> user.getRoles() != null && user.getRoles().stream().anyMatch(role -> "RESIDENT".equals(role.getName())))
            .collect(Collectors.toList());
        
        // Get staff users for assignment
        List<User> staffUsers = allUsers.stream()
            .filter(user -> user.getRoles() != null && user.getRoles().stream().anyMatch(role -> "STAFF".equals(role.getName()) || "TECHNICIAN".equals(role.getName())))
            .collect(Collectors.toList());
        
        String[] requestTitles = {
            "S·ª≠a ch·ªØa ƒëi·ªÅu h√≤a kh√¥ng ho·∫°t ƒë·ªông",
            "Thay b√≥ng ƒë√®n h√†nh lang b·ªã ch√°y",
            "S·ª≠a v√≤i n∆∞·ªõc b·ªã r√≤ r·ªâ",
            "D·ªçn d·∫πp r√°c th·∫£i ·ªü s√¢n chung",
            "Ki·ªÉm tra h·ªá th·ªëng ƒëi·ªán",
            "S·ª≠a ch·ªØa thang m√°y b·ªã l·ªói",
            "B·∫£o tr√¨ h·ªá th·ªëng n∆∞·ªõc",
            "V·ªá sinh khu v·ª±c chung",
            "S·ª≠a ch·ªØa c·ª≠a t·ª± ƒë·ªông",
            "Ki·ªÉm tra camera an ninh",
            "C·∫Øt t·ªâa c√¢y xanh",
            "S·ª≠a ch·ªØa wifi kh√¥ng ·ªïn ƒë·ªãnh",
            "Thay kh√≥a c·ª≠a b·ªã h·ªèng",
            "S·ª≠a ch·ªØa m√°y b∆°m n∆∞·ªõc",
            "D·ªçn d·∫πp b√£i ƒë·ªó xe"
        };
        
        String[] requestDescriptions = {
            "ƒêi·ªÅu h√≤a trong ph√≤ng kh√°ch kh√¥ng ho·∫°t ƒë·ªông, c·∫ßn ki·ªÉm tra v√† s·ª≠a ch·ªØa g·∫•p",
            "B√≥ng ƒë√®n h√†nh lang t·∫ßng 5 b·ªã ch√°y, c·∫ßn thay th·∫ø ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n",
            "V√≤i n∆∞·ªõc trong nh√† b·∫øp b·ªã r√≤ r·ªâ, c·∫ßn s·ª≠a ch·ªØa ƒë·ªÉ tr√°nh l√£ng ph√≠ n∆∞·ªõc",
            "R√°c th·∫£i t√≠ch t·ª• ·ªü s√¢n chung, c·∫ßn d·ªçn d·∫πp ƒë·ªÉ gi·ªØ v·ªá sinh",
            "H·ªá th·ªëng ƒëi·ªán c√≥ d·∫•u hi·ªáu b·∫•t th∆∞·ªùng, c·∫ßn ki·ªÉm tra ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n",
            "Thang m√°y t√≤a A b·ªã l·ªói, c·∫ßn s·ª≠a ch·ªØa ƒë·ªÉ c∆∞ d√¢n s·ª≠ d·ª•ng",
            "H·ªá th·ªëng n∆∞·ªõc c√≥ v·∫•n ƒë·ªÅ, c·∫ßn b·∫£o tr√¨ ƒë·ªãnh k·ª≥",
            "Khu v·ª±c chung c·∫ßn ƒë∆∞·ª£c v·ªá sinh s·∫°ch s·∫Ω",
            "C·ª≠a t·ª± ƒë·ªông ·ªü l·ªëi v√†o b·ªã h·ªèng, c·∫ßn s·ª≠a ch·ªØa",
            "Camera an ninh kh√¥ng ho·∫°t ƒë·ªông, c·∫ßn ki·ªÉm tra v√† s·ª≠a ch·ªØa",
            "C√¢y xanh c·∫ßn ƒë∆∞·ª£c c·∫Øt t·ªâa ƒë·ªÉ ƒë·∫£m b·∫£o th·∫©m m·ªπ",
            "Wifi kh√¥ng ·ªïn ƒë·ªãnh, c·∫ßn ki·ªÉm tra v√† kh·∫Øc ph·ª•c",
            "Kh√≥a c·ª≠a ch√≠nh b·ªã h·ªèng, c·∫ßn thay th·∫ø ƒë·ªÉ ƒë·∫£m b·∫£o an to√†n",
            "M√°y b∆°m n∆∞·ªõc b·ªã l·ªói, c·∫ßn s·ª≠a ch·ªØa ƒë·ªÉ ƒë·∫£m b·∫£o cung c·∫•p n∆∞·ªõc",
            "B√£i ƒë·ªó xe c·∫ßn ƒë∆∞·ª£c d·ªçn d·∫πp v√† s·∫Øp x·∫øp l·∫°i"
        };
        
        // Create service requests with different statuses
        for (int i = 0; i < Math.min(20, residentUsers.size()); i++) {
            User resident = residentUsers.get(i % residentUsers.size());
            ServiceCategory category = serviceCategories.get(i % serviceCategories.size());
            User assignedStaff = staffUsers.isEmpty() ? null : staffUsers.get(i % staffUsers.size());
            
            // Determine status based on index
            ServiceRequestStatus status;
            if (i < 5) status = ServiceRequestStatus.OPEN;
            else if (i < 10) status = ServiceRequestStatus.IN_PROGRESS;
            else if (i < 15) status = ServiceRequestStatus.COMPLETED;
            else status = ServiceRequestStatus.CANCELLED;
            
            ServiceRequestPriority priority = (i % 3 == 0) ? ServiceRequestPriority.P1 : 
                                           (i % 3 == 1) ? ServiceRequestPriority.P3 : 
                                           ServiceRequestPriority.P4;
            
            ServiceRequest request = serviceRequestRepository.save(ServiceRequest.builder()
                .user(resident)
                .title(requestTitles[i % requestTitles.length])
                .category(category)
                .description(requestDescriptions[i % requestDescriptions.length])
                .submittedAt(LocalDateTime.now().minusDays(10 - i))
                .assignedTo(assignedStaff)
                .assignedAt(assignedStaff != null ? LocalDateTime.now().minusDays(8 - i) : null)
                .status(status)
                .priority(priority)
                .resolutionNotes(status == ServiceRequestStatus.COMPLETED ? "ƒê√£ ho√†n th√†nh theo y√™u c·∫ßu" : null)
                .completedAt(status == ServiceRequestStatus.COMPLETED ? LocalDateTime.now().minusDays(5 - i) : null)
                .rating(status == ServiceRequestStatus.COMPLETED ? 4 + (i % 2) : null)
                .build());
            
            serviceRequests.add(request);
        }
        
        // 8.2 Create Feedback Categories and Feedback
        List<FeedbackCategory> feedbackCategories = new ArrayList<>();
        
        feedbackCategories.add(feedbackCategoryRepository.save(FeedbackCategory.builder()
            .categoryCode("GENERAL_SERVICE")
            .categoryName("D·ªãch v·ª• chung")
            .description("Ph·∫£n h·ªìi v·ªÅ c√°c d·ªãch v·ª• chung c·ªßa t√≤a nh√†")
            .build()));
        
        feedbackCategories.add(feedbackCategoryRepository.save(FeedbackCategory.builder()
            .categoryCode("SECURITY")
            .categoryName("An ninh")
            .description("Ph·∫£n h·ªìi v·ªÅ h·ªá th·ªëng an ninh v√† b·∫£o v·ªá")
            .build()));
        
        feedbackCategories.add(feedbackCategoryRepository.save(FeedbackCategory.builder()
            .categoryCode("CLEANING")
            .categoryName("V·ªá sinh")
            .description("Ph·∫£n h·ªìi v·ªÅ d·ªãch v·ª• v·ªá sinh v√† d·ªçn d·∫πp")
            .build()));
        
        feedbackCategories.add(feedbackCategoryRepository.save(FeedbackCategory.builder()
            .categoryCode("FACILITIES")
            .categoryName("Ti·ªán √≠ch")
            .description("Ph·∫£n h·ªìi v·ªÅ c√°c ti·ªán √≠ch v√† c∆° s·ªü v·∫≠t ch·∫•t")
            .build()));
        
        feedbackCategories.add(feedbackCategoryRepository.save(FeedbackCategory.builder()
            .categoryCode("MANAGEMENT")
            .categoryName("Qu·∫£n l√Ω")
            .description("Ph·∫£n h·ªìi v·ªÅ d·ªãch v·ª• qu·∫£n l√Ω v√† h·ªó tr·ª£")
            .build()));
        
        // 8.3 Create Diverse Feedback
        List<Feedback> feedbacks = new ArrayList<>();
        
        String[] feedbackContents = {
            "D·ªãch v·ª• v·ªá sinh r·∫•t t·ªët, nh√¢n vi√™n l√†m vi·ªác chuy√™n nghi·ªáp",
            "H·ªá th·ªëng an ninh c·∫ßn ƒë∆∞·ª£c c·∫£i thi·ªán, camera c√≥ v·∫•n ƒë·ªÅ",
            "Ti·ªán √≠ch gym r·∫•t t·ªët, thi·∫øt b·ªã hi·ªán ƒë·∫°i v√† s·∫°ch s·∫Ω",
            "Qu·∫£n l√Ω ph·∫£n h·ªìi ch·∫≠m, c·∫ßn c·∫£i thi·ªán th·ªùi gian x·ª≠ l√Ω",
            "Khu v·ª±c chung c·∫ßn ƒë∆∞·ª£c v·ªá sinh th∆∞·ªùng xuy√™n h∆°n",
            "D·ªãch v·ª• internet ·ªïn ƒë·ªãnh, t·ªëc ƒë·ªô t·ªët",
            "B·∫£o v·ªá l√†m vi·ªác r·∫•t t·ªët, an to√†n cho c∆∞ d√¢n",
            "C·∫ßn th√™m ti·ªán √≠ch cho tr·∫ª em",
            "H·ªá th·ªëng thang m√°y ho·∫°t ƒë·ªông t·ªët",
            "C·∫ßn c·∫£i thi·ªán h·ªá th·ªëng th√¥ng b√°o"
        };
        
        String[] responses = {
            "C·∫£m ∆°n ph·∫£n h·ªìi t√≠ch c·ª±c c·ªßa b·∫°n. Ch√∫ng t√¥i s·∫Ω duy tr√¨ ch·∫•t l∆∞·ª£ng d·ªãch v·ª•",
            "Ch√∫ng t√¥i ƒë√£ ghi nh·∫≠n v·∫•n ƒë·ªÅ v√† s·∫Ω kh·∫Øc ph·ª•c trong th·ªùi gian s·ªõm nh·∫•t",
            "R·∫•t vui khi b·∫°n h√†i l√≤ng v·ªõi d·ªãch v·ª•. Ch√∫ng t√¥i s·∫Ω ti·∫øp t·ª•c c·∫£i thi·ªán",
            "Xin l·ªói v√¨ s·ª± b·∫•t ti·ªán. Ch√∫ng t√¥i s·∫Ω c·∫£i thi·ªán th·ªùi gian ph·∫£n h·ªìi",
            "Ch√∫ng t√¥i s·∫Ω tƒÉng c∆∞·ªùng t·∫ßn su·∫•t v·ªá sinh khu v·ª±c chung",
            "C·∫£m ∆°n ph·∫£n h·ªìi t√≠ch c·ª±c v·ªÅ d·ªãch v·ª• internet",
            "C·∫£m ∆°n s·ª± ghi nh·∫≠n c·ªßa b·∫°n v·ªÅ ƒë·ªôi ng≈© b·∫£o v·ªá",
            "Ch√∫ng t√¥i ƒëang l√™n k·∫ø ho·∫°ch b·ªï sung ti·ªán √≠ch cho tr·∫ª em",
            "C·∫£m ∆°n ph·∫£n h·ªìi t√≠ch c·ª±c v·ªÅ h·ªá th·ªëng thang m√°y",
            "Ch√∫ng t√¥i s·∫Ω c·∫£i thi·ªán h·ªá th·ªëng th√¥ng b√°o ƒë·ªÉ ph·ª•c v·ª• t·ªët h∆°n"
        };
        
        for (int i = 0; i < Math.min(15, residentUsers.size()); i++) {
            User resident = residentUsers.get(i % residentUsers.size());
            FeedbackCategory category = feedbackCategories.get(i % feedbackCategories.size());
            
            FeedbackStatus status = (i < 10) ? FeedbackStatus.RESPONDED : FeedbackStatus.PENDING;
            
            Feedback feedback = feedbackRepository.save(Feedback.builder()
                .user(resident)
                .category(category)
                .content(feedbackContents[i % feedbackContents.length])
                .submittedAt(LocalDateTime.now().minusDays(15 - i))
                .status(status)
                .response(status == FeedbackStatus.RESPONDED ? responses[i % responses.length] : null)
                .respondedAt(status == FeedbackStatus.RESPONDED ? LocalDateTime.now().minusDays(10 - i) : null)
                .build());
            
            feedbacks.add(feedback);
        }
        
        System.out.println("‚úÖ Created " + serviceRequests.size() + " service requests and " + feedbacks.size() + " feedback items");
    }

    /**
     * PART 9: Initialize Activity Logs and AI QA
     */
    private void initializeActivityLogsAndAiQa() {
        System.out.println("üìù Initializing Activity Logs and AI QA...");
        
        // Get all users
        List<User> allUsers = userRepository.findAllWithRoles();
        
        // 9.1 Create Activity Logs
        List<ActivityLog> activityLogs = new ArrayList<>();
        
        String[] activities = {
            "ƒêƒÉng nh·∫≠p h·ªá th·ªëng",
            "Xem th√¥ng b√°o m·ªõi",
            "ƒê·∫∑t ti·ªán √≠ch ph√≤ng gym",
            "Thanh to√°n h√≥a ƒë∆°n th√°ng 12",
            "B√°o c√°o s·ª± c·ªë ƒëi·ªÅu h√≤a",
            "ƒêƒÉng k√Ω tham gia s·ª± ki·ªán Gi√°ng sinh",
            "C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n",
            "Xem l·ªãch s·ª≠ thanh to√°n",
            "ƒê·∫∑t ti·ªán √≠ch h·ªì b∆°i",
            "G·ª≠i ph·∫£n h·ªìi v·ªÅ d·ªãch v·ª•",
            "Xem th√¥ng tin cƒÉn h·ªô",
            "T·∫£i xu·ªëng h√≥a ƒë∆°n",
            "ƒê·∫∑t l·ªãch h·∫πn v·ªõi qu·∫£n l√Ω",
            "Xem th√¥ng b√°o b·∫£o tr√¨",
            "ƒêƒÉng k√Ω nh·∫≠n th√¥ng b√°o"
        };
        
        ActivityActionType[] actionTypes = {
            ActivityActionType.LOGIN,
            ActivityActionType.VIEW_ANNOUNCEMENT,
            ActivityActionType.CREATE_FACILITY_BOOKING,
            ActivityActionType.PAYMENT,
            ActivityActionType.CREATE_SERVICE_REQUEST,
            ActivityActionType.REGISTER_EVENT,
            ActivityActionType.UPDATE_USER,
            ActivityActionType.VIEW_INVOICE,
            ActivityActionType.CREATE_FACILITY_BOOKING,
            ActivityActionType.SUBMIT_FEEDBACK,
            ActivityActionType.VIEW_ANNOUNCEMENT,
            ActivityActionType.DOWNLOAD_INVOICE,
            ActivityActionType.CREATE_SUPPORT_REQUEST,
            ActivityActionType.VIEW_ANNOUNCEMENT,
            ActivityActionType.UPDATE_USER
        };
        
        for (int i = 0; i < Math.min(50, allUsers.size() * 3); i++) {
            User user = allUsers.get(i % allUsers.size());
            
            ActivityLog log = activityLogRepository.save(ActivityLog.builder()
                .user(user)
                .actionType(actionTypes[i % actionTypes.length])
                .description(activities[i % activities.length])
                .ipAddress("192.168.1." + (100 + (i % 50)))
                .userAgent("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36")
                .resourceType("WEB")
                .resourceId((long) (i + 1))
                .build());
            
            activityLogs.add(log);
        }
        
        // 9.2 Create AI QA History
        List<AiQaHistory> aiQaHistories = new ArrayList<>();
        
        String[] questions = {
            "L√†m th·∫ø n√†o ƒë·ªÉ ƒë·∫∑t ti·ªán √≠ch ph√≤ng gym?",
            "Ph√≠ d·ªãch v·ª• th√°ng n√†y bao nhi√™u?",
            "C√°ch thanh to√°n h√≥a ƒë∆°n online?",
            "Th·ªùi gian m·ªü c·ª≠a h·ªì b∆°i?",
            "L√†m sao ƒë·ªÉ b√°o c√°o s·ª± c·ªë?",
            "C√≥ th·ªÉ ƒëƒÉng k√Ω tham gia s·ª± ki·ªán kh√¥ng?",
            "C√°ch c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n?",
            "L·ªãch v·ªá sinh chung khi n√†o?",
            "Th√¥ng tin v·ªÅ b·∫£o m·∫≠t an ninh?",
            "C√°ch li√™n h·ªá qu·∫£n l√Ω t√≤a nh√†?"
        };
        
        String[] answers = {
            "B·∫°n c√≥ th·ªÉ ƒë·∫∑t ti·ªán √≠ch ph√≤ng gym th√¥ng qua ·ª©ng d·ª•ng ho·∫∑c website. V√†o m·ª•c 'Ti·ªán √≠ch' -> 'ƒê·∫∑t ti·ªán √≠ch' -> Ch·ªçn ph√≤ng gym v√† th·ªùi gian ph√π h·ª£p.",
            "Ph√≠ d·ªãch v·ª• th√°ng n√†y bao g·ªìm: ƒêi·ªán: 300,000ƒë, N∆∞·ªõc: 200,000ƒë, V·ªá sinh: 150,000ƒë, An ninh: 100,000ƒë. T·ªïng c·ªông: 750,000ƒë.",
            "B·∫°n c√≥ th·ªÉ thanh to√°n online qua: 1) Chuy·ªÉn kho·∫£n ng√¢n h√†ng, 2) V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay), 3) Th·∫ª t√≠n d·ª•ng. V√†o m·ª•c 'Thanh to√°n' ƒë·ªÉ th·ª±c hi·ªán.",
            "H·ªì b∆°i m·ªü c·ª≠a t·ª´ 6:00-21:00 h√†ng ng√†y. C√≥ c·ª©u h·ªô chuy√™n nghi·ªáp v√† ph√≤ng thay ƒë·ªì s·∫°ch s·∫Ω.",
            "ƒê·ªÉ b√°o c√°o s·ª± c·ªë, b·∫°n c√≥ th·ªÉ: 1) G·ªçi hotline 0901234567, 2) G·ª≠i y√™u c·∫ßu qua ·ª©ng d·ª•ng, 3) Li√™n h·ªá tr·ª±c ti·∫øp v·ªõi qu·∫£n l√Ω.",
            "C√≥, b·∫°n c√≥ th·ªÉ ƒëƒÉng k√Ω tham gia s·ª± ki·ªán qua ·ª©ng d·ª•ng. V√†o m·ª•c 'S·ª± ki·ªán' -> Ch·ªçn s·ª± ki·ªán mu·ªën tham gia -> Nh·∫•n 'ƒêƒÉng k√Ω'.",
            "ƒê·ªÉ c·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n: V√†o 'H·ªì s∆° c√° nh√¢n' -> 'Ch·ªânh s·ª≠a' -> C·∫≠p nh·∫≠t th√¥ng tin -> 'L∆∞u'.",
            "L·ªãch v·ªá sinh chung: Th·ª© 2 v√† Th·ª© 6 h√†ng tu·∫ßn t·ª´ 8:00-12:00. Vui l√≤ng ƒë·ªÉ r√°c ƒë√∫ng n∆°i quy ƒë·ªãnh.",
            "H·ªá th·ªëng an ninh 24/7 v·ªõi camera gi√°m s√°t, b·∫£o v·ªá tu·∫ßn tra, c·ª≠a t·ª± ƒë·ªông. B√°o c√°o ngay n·∫øu th·∫•y h√†nh vi ƒë√°ng ng·ªù.",
            "Li√™n h·ªá qu·∫£n l√Ω: Hotline 0901234567, Email: manager@apartment.com, VƒÉn ph√≤ng: T·∫ßng 1 t√≤a A."
        };
        
        for (int i = 0; i < Math.min(20, allUsers.size()); i++) {
            User user = allUsers.get(i % allUsers.size());
            
            AiQaHistory qaHistory = aiQaHistoryRepository.save(AiQaHistory.builder()
                .user(user)
                .question(questions[i % questions.length])
                .aiAnswer(answers[i % answers.length])
                .askedAt(LocalDateTime.now().minusDays(5 + i))
                .responseTime(1000 + (i * 100))
                .feedback(i % 3 == 0 ? "POSITIVE" : (i % 3 == 1 ? "NEGATIVE" : "NEUTRAL"))
                .build());
            
            aiQaHistories.add(qaHistory);
        }
        
        System.out.println("‚úÖ Created " + activityLogs.size() + " activity logs and " + aiQaHistories.size() + " AI QA histories");
    }

    /**
     * PART 10: Initialize Vehicles
     */
    private void initializeVehicles() {
        System.out.println("üöó Initializing Vehicles...");
        
        // Get resident users
        List<User> residentUsers = userRepository.findAllWithRoles().stream()
            .filter(user -> user.getRoles() != null && user.getRoles().stream().anyMatch(role -> "RESIDENT".equals(role.getName())))
            .collect(Collectors.toList());
        
        List<Apartment> apartments = apartmentRepository.findAll();
        
        if (residentUsers.isEmpty() || apartments.isEmpty()) {
            System.out.println("‚ö†Ô∏è No resident users or apartments found, skipping vehicles");
            return;
        }
        
        // 10.1 Create Diverse Vehicles
        List<Vehicle> vehicles = new ArrayList<>();
        
        String[] licensePlates = {
            "30A-12345", "30A-12346", "30A-12347", "30A-12348", "30A-12349",
            "30B-12350", "30B-12351", "30B-12352", "30B-12353", "30B-12354",
            "30C-12355", "30C-12356", "30C-12357", "30C-12358", "30C-12359",
            "30D-12360", "30D-12361", "30D-12362", "30D-12363", "30D-12364"
        };
        
        String[] brands = {"Toyota", "Honda", "Ford", "Hyundai", "Kia", "Mazda", "Nissan", "BMW", "Mercedes", "Audi"};
        String[] models = {"Vios", "City", "Ranger", "Accent", "Rio", "3", "Sunny", "X3", "C-Class", "A4"};
        String[] colors = {"Tr·∫Øng", "ƒêen", "B·∫°c", "Xanh", "ƒê·ªè", "X√°m", "V√†ng", "Cam", "T√≠m", "N√¢u"};
        
        for (int i = 0; i < Math.min(15, residentUsers.size()); i++) {
            User resident = residentUsers.get(i % residentUsers.size());
            Apartment apartment = apartments.get(i % apartments.size());
            
            VehicleType vehicleType = (i % 3 == 0) ? VehicleType.CAR_4_SEATS : 
                                    (i % 3 == 1) ? VehicleType.MOTORCYCLE : 
                                    VehicleType.BICYCLE;
            
            VehicleStatus status = (i < 10) ? VehicleStatus.APPROVED : 
                                 (i < 12) ? VehicleStatus.PENDING : 
                                 VehicleStatus.REJECTED;
            
            Vehicle vehicle = vehicleRepository.save(Vehicle.builder()
                .licensePlate(licensePlates[i % licensePlates.length])
                .vehicleType(vehicleType)
                .brand(brands[i % brands.length])
                .model(models[i % models.length])
                .color(colors[i % colors.length])
                .imageUrls("vehicle_" + (i + 1) + ".jpg")
                .status(status)
                .monthlyFee(vehicleType == VehicleType.CAR_4_SEATS ? new BigDecimal("200000") : 
                           vehicleType == VehicleType.MOTORCYCLE ? new BigDecimal("50000") : new BigDecimal("20000"))
                .user(resident)
                .apartment(apartment)
                .build());
            
            vehicles.add(vehicle);
        }
        
        System.out.println("‚úÖ Created " + vehicles.size() + " vehicles with diverse information");
    }

    /**
     * PART 11: Initialize Emergency Contacts and Additional Data
     */
    private void initializeEmergencyContactsAndAdditionalData() {
        System.out.println("üìû Initializing Emergency Contacts and Additional Data...");
        
        // Get resident users
        List<User> residentUsers = userRepository.findAllWithRoles().stream()
            .filter(user -> user.getRoles() != null && user.getRoles().stream().anyMatch(role -> "RESIDENT".equals(role.getName())))
            .collect(Collectors.toList());
        
        if (residentUsers.isEmpty()) {
            System.out.println("‚ö†Ô∏è No resident users found, skipping emergency contacts");
            return;
        }
        
        // 11.1 Create Emergency Contacts
        List<EmergencyContact> emergencyContacts = new ArrayList<>();
        
        String[] contactNames = {
            "Nguy·ªÖn VƒÉn B·ªë", "Tr·∫ßn Th·ªã M·∫π", "L√™ VƒÉn Anh", "Ph·∫°m Th·ªã Ch·ªã", "Ho√†ng VƒÉn Em",
            "ƒê·∫∑ng Th·ªã V·ª£", "V≈© VƒÉn Ch·ªìng", "B√πi Th·ªã Con", "Ng√¥ VƒÉn B·∫°n", "L√Ω Th·ªã H√†ng X√≥m"
        };
        
        String[] relationships = {
            "B·ªë", "M·∫π", "Anh trai", "Ch·ªã g√°i", "Em trai",
            "V·ª£", "Ch·ªìng", "Con", "B·∫°n th√¢n", "H√†ng x√≥m"
        };
        
        String[] phoneNumbers = {
            "0901234580", "0901234581", "0901234582", "0901234583", "0901234584",
            "0901234585", "0901234586", "0901234587", "0901234588", "0901234589"
        };
        
        String[] emails = {
            "bo@gmail.com", "me@gmail.com", "anh@gmail.com", "chi@gmail.com", "em@gmail.com",
            "vo@gmail.com", "chong@gmail.com", "con@gmail.com", "ban@gmail.com", "hangxom@gmail.com"
        };
        
        for (int i = 0; i < Math.min(10, residentUsers.size()); i++) {
            User resident = residentUsers.get(i % residentUsers.size());
            
            EmergencyContact contact = EmergencyContact.builder()
                .user(resident)
                .name(contactNames[i % contactNames.length])
                .relationship(relationships[i % relationships.length])
                .phone(phoneNumbers[i % phoneNumbers.length])
                .build();
            
            emergencyContacts.add(contact);
        }
        
        // 11.2 Create Event Registrations
        List<EventRegistration> eventRegistrations = new ArrayList<>();
        
        List<Event> events = eventRepository.findAll();
        if (!events.isEmpty()) {
            for (int i = 0; i < Math.min(20, residentUsers.size()); i++) {
                User resident = residentUsers.get(i % residentUsers.size());
                Event event = events.get(i % events.size());
                
                EventRegistrationStatus status = (i < 15) ? EventRegistrationStatus.REGISTERED : 
                                              (i < 18) ? EventRegistrationStatus.CANCELLED : 
                                              EventRegistrationStatus.ATTENDED;
                
                EventRegistration registration = eventRegistrationRepository.save(EventRegistration.builder()
                    .event(event)
                    .user(resident)
                    .status(status)
                    .registeredAt(LocalDateTime.now().minusDays(10 - i))
                    .build());
                
                eventRegistrations.add(registration);
            }
        }
        
        System.out.println("‚úÖ Created " + emergencyContacts.size() + " emergency contacts and " + eventRegistrations.size() + " event registrations");
        
        // 11.3 Clean up duplicate event registrations
        cleanupDuplicateEventRegistrations();
        
        System.out.println("üéâ All data initialization completed successfully!");
    }
    
    /**
     * Helper method to clean up duplicate event registrations
     */
    private void cleanupDuplicateEventRegistrations() {
        System.out.println("üßπ Cleaning up duplicate event registrations...");
        
        List<EventRegistration> allRegistrations = eventRegistrationRepository.findAll();
        Set<String> seen = new HashSet<>();
        List<EventRegistration> toDelete = new ArrayList<>();
        
        for (EventRegistration registration : allRegistrations) {
            String key = registration.getEvent().getId() + "-" + registration.getUser().getId();
            if (seen.contains(key)) {
                toDelete.add(registration);
            } else {
                seen.add(key);
            }
        }
        
        if (!toDelete.isEmpty()) {
            eventRegistrationRepository.deleteAll(toDelete);
            System.out.println("üóëÔ∏è Deleted " + toDelete.size() + " duplicate event registrations");
        }
    }
} 