// package com.mytech.apartment.portal.services;

import com.mytech.apartment.portal.models.*;
import com.mytech.apartment.portal.repositories.*;
import com.mytech.apartment.portal.models.enums.VehicleType;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.mockito.ArgumentMatchers.*;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
class YearlyBillingServiceTest {

    @Mock
    private InvoiceService invoiceService;

    @Mock
    private InvoiceRepository invoiceRepository;

    @Mock
    private ApartmentRepository apartmentRepository;

    @Mock
    private ServiceFeeConfigRepository serviceFeeConfigRepository;

    @Mock
    private VehicleRepository vehicleRepository;

    @Mock
    private WaterMeterReadingRepository waterMeterReadingRepository;

    @Mock
    private ApartmentResidentRepository apartmentResidentRepository;

    @InjectMocks
    private YearlyBillingService yearlyBillingService;

    @Test
    void testGenerateYearlyInvoiceForApartment() {
        // Arrange
        Long apartmentId = 1L;
        int year = 2024;

        // Mock apartment
        Apartment apartment = Apartment.builder()
            .id(apartmentId)
            .area(80.0)
            .build();

        // Mock service fee config
        ServiceFeeConfig config = ServiceFeeConfig.builder()
            .month(1)
            .year(year)
            .serviceFeePerM2(5000.0)
            .waterFeePerM3(15000.0)
            .parkingFee(200000.0)
            .build();

        // Mock water meter reading
        WaterMeterReading waterReading = new WaterMeterReading();
        waterReading.setConsumption(BigDecimal.valueOf(10.5));

        // Mock apartment residents
        ApartmentResident apartmentResident = new ApartmentResident();
        ApartmentResidentId id = new ApartmentResidentId();
        id.setApartmentId(apartmentId);
        id.setUserId(1L);
        apartmentResident.setId(id);

        // Mock vehicles (chỉ xe máy và ô tô 4 chỗ, 7 chỗ)
        Vehicle car4Seats = Vehicle.builder()
            .vehicleType(VehicleType.CAR_4_SEATS)
            .monthlyFee(BigDecimal.valueOf(200000.0))
            .build();
        
        Vehicle car7Seats = Vehicle.builder()
            .vehicleType(VehicleType.CAR_7_SEATS)
            .monthlyFee(BigDecimal.valueOf(250000.0))
            .build();
        
        Vehicle motorcycle = Vehicle.builder()
            .vehicleType(VehicleType.MOTORCYCLE)
            .monthlyFee(BigDecimal.valueOf(50000.0))
            .build();

        // Mock invoice
        Invoice invoice = Invoice.builder()
            .id(1L)
            .apartmentId(apartmentId)
            .billingPeriod("2024-01")
            .status(com.mytech.apartment.portal.models.enums.InvoiceStatus.UNPAID)
            .build();

        // Setup mocks
        when(apartmentRepository.findById(apartmentId)).thenReturn(Optional.of(apartment));
        when(serviceFeeConfigRepository.findByMonthAndYear(anyInt(), anyInt())).thenReturn(Optional.of(config));
        when(waterMeterReadingRepository.findByApartmentIdAndReadingMonth(anyInt(), anyString())).thenReturn(Optional.of(waterReading));
        when(apartmentResidentRepository.findByIdApartmentId(apartmentId)).thenReturn(Arrays.asList(apartmentResident));
        when(vehicleRepository.findByResidentUserId(anyLong())).thenReturn(Arrays.asList(car4Seats, car7Seats, motorcycle));
        when(invoiceRepository.findByApartmentIdAndBillingPeriod(apartmentId, "2024-01")).thenReturn(Optional.empty());
        when(invoiceRepository.save(any(Invoice.class))).thenReturn(invoice);

        // Act
        yearlyBillingService.generateYearlyInvoiceForApartment(apartmentId, year);

        // Assert
        verify(invoiceRepository, times(12)).save(any(Invoice.class)); // 12 tháng
        verify(invoiceService, times(48)).addInvoiceItem(anyLong(), anyString(), anyString(), anyString(), any()); // 3 loại phí × 12 tháng + 2 xe × 12 tháng
    }

    @Test
    void testCreateYearlyFeeConfig() {
        // Arrange
        int year = 2024;
        double serviceFeePerM2 = 5000.0;
        double waterFeePerM3 = 15000.0;
        double parkingFee = 200000.0;

        when(serviceFeeConfigRepository.save(any(ServiceFeeConfig.class))).thenReturn(new ServiceFeeConfig());

        // Act
        yearlyBillingService.createYearlyFeeConfig(year, serviceFeePerM2, waterFeePerM3, parkingFee);

        // Assert
        verify(serviceFeeConfigRepository, times(12)).save(any(ServiceFeeConfig.class)); // 12 tháng
    }

    @Test
    void testUpdateFeeConfig() {
        // Arrange
        int month = 6;
        int year = 2024;
        double serviceFeePerM2 = 5500.0;
        double waterFeePerM3 = 16000.0;
        double parkingFee = 220000.0;

        ServiceFeeConfig existingConfig = ServiceFeeConfig.builder()
            .month(month)
            .year(year)
            .serviceFeePerM2(5000.0)
            .waterFeePerM3(15000.0)
            .parkingFee(200000.0)
            .build();

        when(serviceFeeConfigRepository.findByMonthAndYear(month, year)).thenReturn(Optional.of(existingConfig));
        when(serviceFeeConfigRepository.save(any(ServiceFeeConfig.class))).thenReturn(existingConfig);

        // Act
        yearlyBillingService.updateFeeConfig(month, year, serviceFeePerM2, waterFeePerM3, parkingFee);

        // Assert
        verify(serviceFeeConfigRepository).save(any(ServiceFeeConfig.class));
    }

    @Test
    void testVehicleFeeFiltering() {
        // Arrange
        Long apartmentId = 1L;
        int year = 2024;

        // Mock apartment
        Apartment apartment = Apartment.builder()
            .id(apartmentId)
            .area(80.0)
            .build();

        // Mock service fee config
        ServiceFeeConfig config = ServiceFeeConfig.builder()
            .month(1)
            .year(year)
            .serviceFeePerM2(5000.0)
            .waterFeePerM3(15000.0)
            .parkingFee(200000.0)
            .build();

        // Mock water meter reading
        WaterMeterReading waterReading = new WaterMeterReading();
        waterReading.setConsumption(BigDecimal.valueOf(10.5));

        // Mock apartment residents
        ApartmentResident apartmentResident = new ApartmentResident();
        ApartmentResidentId id = new ApartmentResidentId();
        id.setApartmentId(apartmentId);
        id.setUserId(1L);
        apartmentResident.setId(id);

        // Mock vehicles (bao gồm cả xe được tính phí và không được tính phí)
        Vehicle car4Seats = Vehicle.builder()
            .vehicleType(VehicleType.CAR_4_SEATS)
            .monthlyFee(BigDecimal.valueOf(200000.0))
            .build();
        
        Vehicle motorcycle = Vehicle.builder()
            .vehicleType(VehicleType.MOTORCYCLE)
            .monthlyFee(BigDecimal.valueOf(50000.0))
            .build();
        
        Vehicle truck = Vehicle.builder()
            .vehicleType(VehicleType.TRUCK)
            .monthlyFee(BigDecimal.valueOf(300000.0))
            .build();
        
        Vehicle bicycle = Vehicle.builder()
            .vehicleType(VehicleType.BICYCLE)
            .monthlyFee(BigDecimal.valueOf(20000.0))
            .build();

        // Mock invoice
        Invoice invoice = Invoice.builder()
            .id(1L)
            .apartmentId(apartmentId)
            .billingPeriod("2024-01")
            .status(com.mytech.apartment.portal.models.enums.InvoiceStatus.UNPAID)
            .build();

        // Setup mocks
        when(apartmentRepository.findById(apartmentId)).thenReturn(Optional.of(apartment));
        when(serviceFeeConfigRepository.findByMonthAndYear(anyInt(), anyInt())).thenReturn(Optional.of(config));
        when(waterMeterReadingRepository.findByApartmentIdAndReadingMonth(anyInt(), anyString())).thenReturn(Optional.of(waterReading));
        when(apartmentResidentRepository.findByIdApartmentId(apartmentId)).thenReturn(Arrays.asList(apartmentResident));
        when(vehicleRepository.findByResidentUserId(anyLong())).thenReturn(Arrays.asList(car4Seats, motorcycle, truck, bicycle));
        when(invoiceRepository.findByApartmentIdAndBillingPeriod(apartmentId, "2024-01")).thenReturn(Optional.empty());
        when(invoiceRepository.save(any(Invoice.class))).thenReturn(invoice);

        // Act
        yearlyBillingService.generateYearlyInvoiceForApartment(apartmentId, year);

        // Assert - Chỉ tính phí cho xe máy và ô tô (2 xe), không tính xe tải và xe đạp
        verify(invoiceRepository, times(12)).save(any(Invoice.class)); // 12 tháng
        verify(invoiceService, times(60)).addInvoiceItem(anyLong(), anyString(), anyString(), anyString(), any()); // 3 loại phí × 12 tháng + 2 xe được tính × 12 tháng
    }
} 