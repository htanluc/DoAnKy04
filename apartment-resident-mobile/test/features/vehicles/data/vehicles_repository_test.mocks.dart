// Mocks generated by Mockito 5.4.6 from annotations
// in apartment_resident_mobile/test/features/vehicles/data/vehicles_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:apartment_resident_mobile/features/vehicles/data/vehicles_api.dart'
    as _i3;
import 'package:apartment_resident_mobile/features/vehicles/models/vehicle.dart'
    as _i2;
import 'package:apartment_resident_mobile/features/vehicles/models/vehicle_type.dart'
    as _i5;
import 'package:dio/dio.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeVehicleModel_0 extends _i1.SmartFake implements _i2.VehicleModel {
  _FakeVehicleModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [VehiclesApiClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockVehiclesApiClient extends _i1.Mock implements _i3.VehiclesApiClient {
  MockVehiclesApiClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.VehicleTypeModel>> getVehicleTypes() =>
      (super.noSuchMethod(
            Invocation.method(#getVehicleTypes, []),
            returnValue: _i4.Future<List<_i5.VehicleTypeModel>>.value(
              <_i5.VehicleTypeModel>[],
            ),
          )
          as _i4.Future<List<_i5.VehicleTypeModel>>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getMyApartmentsRaw() =>
      (super.noSuchMethod(
            Invocation.method(#getMyApartmentsRaw, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<List<_i2.VehicleModel>> getMyVehicles() =>
      (super.noSuchMethod(
            Invocation.method(#getMyVehicles, []),
            returnValue: _i4.Future<List<_i2.VehicleModel>>.value(
              <_i2.VehicleModel>[],
            ),
          )
          as _i4.Future<List<_i2.VehicleModel>>);

  @override
  _i4.Future<List<_i2.VehicleModel>> getBuildingVehicles() =>
      (super.noSuchMethod(
            Invocation.method(#getBuildingVehicles, []),
            returnValue: _i4.Future<List<_i2.VehicleModel>>.value(
              <_i2.VehicleModel>[],
            ),
          )
          as _i4.Future<List<_i2.VehicleModel>>);

  @override
  _i4.Future<_i2.VehicleModel> createVehicle({
    required String? licensePlate,
    required String? vehicleType,
    required int? apartmentId,
    String? brand,
    String? model,
    String? color,
    List<String>? imageUrls,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createVehicle, [], {
              #licensePlate: licensePlate,
              #vehicleType: vehicleType,
              #apartmentId: apartmentId,
              #brand: brand,
              #model: model,
              #color: color,
              #imageUrls: imageUrls,
            }),
            returnValue: _i4.Future<_i2.VehicleModel>.value(
              _FakeVehicleModel_0(
                this,
                Invocation.method(#createVehicle, [], {
                  #licensePlate: licensePlate,
                  #vehicleType: vehicleType,
                  #apartmentId: apartmentId,
                  #brand: brand,
                  #model: model,
                  #color: color,
                  #imageUrls: imageUrls,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.VehicleModel>);

  @override
  _i4.Future<List<String>> uploadImages(List<_i6.MultipartFile>? files) =>
      (super.noSuchMethod(
            Invocation.method(#uploadImages, [files]),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);
}
