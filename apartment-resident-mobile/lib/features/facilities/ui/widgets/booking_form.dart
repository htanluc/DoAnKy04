import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../models/facility.dart';
import '../../models/availability.dart';
import '../../models/booking.dart';
import '../../providers/bookings_providers.dart';

class BookingForm extends ConsumerStatefulWidget {
  final Facility facility;
  final String selectedDate;
  final List<TimeSlot> selectedTimeSlots;
  final Function(FacilityBooking) onBookingCreated;

  const BookingForm({
    super.key,
    required this.facility,
    required this.selectedDate,
    required this.selectedTimeSlots,
    required this.onBookingCreated,
  });

  @override
  ConsumerState<BookingForm> createState() => _BookingFormState();
}

class _BookingFormState extends ConsumerState<BookingForm> {
  final _formKey = GlobalKey<FormState>();
  final _purposeController = TextEditingController();
  final _numberOfPeopleController = TextEditingController(text: '1');

  int _numberOfPeople = 1;
  String _purpose = '';

  @override
  void dispose() {
    _purposeController.dispose();
    _numberOfPeopleController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final formState = ref.watch(bookingFormNotifierProvider);

    return Container(
      height: MediaQuery.of(context).size.height * 0.8,
      decoration: const BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.vertical(top: Radius.circular(20)),
      ),
      child: Column(
        children: [
          // Handle bar
          Container(
            margin: const EdgeInsets.only(top: 8),
            width: 40,
            height: 4,
            decoration: BoxDecoration(
              color: Colors.grey[300],
              borderRadius: BorderRadius.circular(2),
            ),
          ),

          // Header
          Padding(
            padding: const EdgeInsets.all(16),
            child: Row(
              children: [
                const Text(
                  'ƒê·∫∑t ti·ªán √≠ch',
                  style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                ),
                const Spacer(),
                IconButton(
                  onPressed: () => Navigator.pop(context),
                  icon: const Icon(Icons.close),
                ),
              ],
            ),
          ),

          const Divider(height: 1),

          // Form content
          Expanded(
            child: Form(
              key: _formKey,
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(16),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    // Facility info
                    _buildInfoCard(),

                    const SizedBox(height: 24),

                    // Time info
                    _buildTimeInfoCard(),

                    const SizedBox(height: 24),

                    // Number of people
                    _buildNumberOfPeopleField(),

                    const SizedBox(height: 16),

                    // Purpose
                    _buildPurposeField(),

                    const SizedBox(height: 24),

                    // Error message
                    if (formState.error != null)
                      Container(
                        padding: const EdgeInsets.all(12),
                        decoration: BoxDecoration(
                          color: Colors.red[50],
                          borderRadius: BorderRadius.circular(8),
                          border: Border.all(color: Colors.red[200]!),
                        ),
                        child: Row(
                          children: [
                            Icon(
                              Icons.error_outline,
                              color: Colors.red[700],
                              size: 20,
                            ),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Text(
                                formState.error!,
                                style: TextStyle(color: Colors.red[700]),
                              ),
                            ),
                          ],
                        ),
                      ),
                  ],
                ),
              ),
            ),
          ),

          // Submit buttons
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // Main booking button
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: formState.isLoading ? null : _submitBooking,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFF1976D2),
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: formState.isLoading
                        ? const SizedBox(
                            height: 20,
                            width: 20,
                            child: CircularProgressIndicator(
                              strokeWidth: 2,
                              valueColor: AlwaysStoppedAnimation<Color>(
                                Colors.white,
                              ),
                            ),
                          )
                        : const Text(
                            'X√°c nh·∫≠n ƒë·∫∑t ch·ªó',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                  ),
                ),

                const SizedBox(height: 12),

                // Quick payment button (for testing)
                SizedBox(
                  width: double.infinity,
                  child: ElevatedButton(
                    onPressed: formState.isLoading ? null : _quickPayment,
                    style: ElevatedButton.styleFrom(
                      backgroundColor: Colors.purple,
                      foregroundColor: Colors.white,
                      padding: const EdgeInsets.symmetric(vertical: 16),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                    child: const Text(
                      'üé≠ Thanh to√°n nhanh (Test)',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w600,
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),

          // Safe area padding
          SizedBox(height: MediaQuery.of(context).padding.bottom),
        ],
      ),
    );
  }

  Widget _buildInfoCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Th√¥ng tin ti·ªán √≠ch',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            Row(
              children: [
                Icon(Icons.location_on, color: Colors.grey[600], size: 20),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    widget.facility.name,
                    style: const TextStyle(fontSize: 16),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Icon(Icons.people, color: Colors.grey[600], size: 20),
                const SizedBox(width: 8),
                Text(
                  'S·ª©c ch·ª©a: ${widget.facility.capacity} ng∆∞·ªùi',
                  style: const TextStyle(fontSize: 14),
                ),
              ],
            ),
            if (widget.facility.usageFee > 0) ...[
              const SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.attach_money, color: Colors.grey[600], size: 20),
                  const SizedBox(width: 8),
                  Text(
                    'Ph√≠ s·ª≠ d·ª•ng: ${widget.facility.usageFee.toStringAsFixed(0)} VNƒê',
                    style: const TextStyle(fontSize: 14),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildTimeInfoCard() {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            const Text(
              'Th·ªùi gian ƒë·∫∑t ch·ªó',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 12),
            Row(
              children: [
                Icon(Icons.calendar_today, color: Colors.grey[600], size: 20),
                const SizedBox(width: 8),
                Text(
                  _formatDate(widget.selectedDate),
                  style: const TextStyle(fontSize: 16),
                ),
              ],
            ),
            const SizedBox(height: 8),
            Row(
              children: [
                Icon(Icons.schedule, color: Colors.grey[600], size: 20),
                const SizedBox(width: 8),
                Expanded(
                  child: widget.selectedTimeSlots.isNotEmpty
                      ? Text(
                          '${_formatTime(widget.selectedTimeSlots.first.startTime)} - ${_formatTime(widget.selectedTimeSlots.last.endTime)}',
                          style: const TextStyle(fontSize: 16),
                        )
                      : const Text(
                          'Ch∆∞a ch·ªçn khung gi·ªù',
                          style: TextStyle(fontSize: 16, color: Colors.grey),
                        ),
                ),
              ],
            ),
            if (widget.selectedTimeSlots.isNotEmpty) ...[
              const SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.timer, color: Colors.grey[600], size: 20),
                  const SizedBox(width: 8),
                  Text(
                    '${widget.selectedTimeSlots.length} khung gi·ªù (${widget.selectedTimeSlots.length} gi·ªù)',
                    style: const TextStyle(fontSize: 14, color: Colors.blue),
                  ),
                ],
              ),
              const SizedBox(height: 8),
              Row(
                children: [
                  Icon(Icons.attach_money, color: Colors.grey[600], size: 20),
                  const SizedBox(width: 8),
                  Text(
                    'T·ªïng chi ph√≠: ${(widget.selectedTimeSlots.length * widget.facility.usageFee).toStringAsFixed(0)} VND',
                    style: const TextStyle(
                      fontSize: 14,
                      fontWeight: FontWeight.bold,
                      color: Colors.red,
                    ),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildNumberOfPeopleField() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'S·ªë ng∆∞·ªùi *',
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: _numberOfPeopleController,
          keyboardType: TextInputType.number,
          decoration: InputDecoration(
            hintText: 'Nh·∫≠p s·ªë ng∆∞·ªùi',
            border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
            prefixIcon: const Icon(Icons.people),
          ),
          validator: (value) {
            if (value == null || value.isEmpty) {
              return 'Vui l√≤ng nh·∫≠p s·ªë ng∆∞·ªùi';
            }
            final number = int.tryParse(value);
            if (number == null || number <= 0) {
              return 'S·ªë ng∆∞·ªùi ph·∫£i l·ªõn h∆°n 0';
            }
            if (number > widget.facility.capacity) {
              return 'S·ªë ng∆∞·ªùi kh√¥ng ƒë∆∞·ª£c v∆∞·ª£t qu√° s·ª©c ch·ª©a (${widget.facility.capacity})';
            }
            return null;
          },
          onChanged: (value) {
            setState(() {
              _numberOfPeople = int.tryParse(value) ?? 1;
            });
          },
        ),
      ],
    );
  }

  Widget _buildPurposeField() {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        const Text(
          'M·ª•c ƒë√≠ch s·ª≠ d·ª•ng *',
          style: TextStyle(fontSize: 16, fontWeight: FontWeight.w600),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: _purposeController,
          maxLines: 3,
          decoration: InputDecoration(
            hintText: 'M√¥ t·∫£ m·ª•c ƒë√≠ch s·ª≠ d·ª•ng ti·ªán √≠ch...',
            border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),
            prefixIcon: const Icon(Icons.description),
          ),
          validator: (value) {
            if (value == null || value.trim().isEmpty) {
              return 'Vui l√≤ng nh·∫≠p m·ª•c ƒë√≠ch s·ª≠ d·ª•ng';
            }
            return null;
          },
          onChanged: (value) {
            setState(() {
              _purpose = value.trim();
            });
          },
        ),
      ],
    );
  }

  Future<void> _submitBooking() async {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    if (widget.selectedTimeSlots.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt khung gi·ªù'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // T√≠nh to√°n th√¥ng tin booking
    final totalCost =
        widget.selectedTimeSlots.length * widget.facility.usageFee;

    // Hi·ªÉn th·ªã th√¥ng tin booking v√† redirect ƒë·∫øn payment
    _showBookingConfirmation(totalCost);
  }

  void _showBookingConfirmation(double totalCost) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('X√°c nh·∫≠n ƒë·∫∑t ch·ªó'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Ti·ªán √≠ch: ${widget.facility.name}'),
            Text('Ng√†y: ${_formatDate(widget.selectedDate)}'),
            Text(
              'Th·ªùi gian: ${_formatTime(widget.selectedTimeSlots.first.startTime)} - ${_formatTime(widget.selectedTimeSlots.last.endTime)}',
            ),
            Text('S·ªë khung gi·ªù: ${widget.selectedTimeSlots.length}'),
            Text('S·ªë ng∆∞·ªùi: ${_numberOfPeople}'),
            Text('M·ª•c ƒë√≠ch: ${_purpose}'),
            const Divider(),
            Text(
              'T·ªïng chi ph√≠: ${totalCost.toStringAsFixed(0)} VND',
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 16,
                color: Colors.red,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _proceedToPayment(totalCost.toDouble());
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('Thanh to√°n'),
          ),
        ],
      ),
    );
  }

  void _quickPayment() {
    if (!_formKey.currentState!.validate()) {
      return;
    }

    if (widget.selectedTimeSlots.isEmpty) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt khung gi·ªù'),
          backgroundColor: Colors.red,
        ),
      );
      return;
    }

    // T√≠nh to√°n th√¥ng tin booking
    final totalCost =
        widget.selectedTimeSlots.length * widget.facility.usageFee;

    // Thanh to√°n nhanh - b·ªè qua payment dialog
    _showMockPaymentSuccess(totalCost, 'MOCK');
  }

  void _proceedToPayment(double totalCost) {
    // Hi·ªÉn th·ªã payment options dialog
    _showPaymentOptions(totalCost);
  }

  void _showPaymentOptions(double totalCost) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text(
              'T·ªïng s·ªë ti·ªÅn: ${totalCost.toStringAsFixed(0)} VND',
              style: const TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.red,
              ),
            ),
            const SizedBox(height: 20),
            const Text('Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n:'),
            const SizedBox(height: 16),
            // Payment method buttons
            _buildPaymentMethodButton(
              context,
              'üí≥ Th·∫ª ATM/Visa/Mastercard',
              'VISA',
              Colors.blue,
              () => _processPayment(totalCost, 'VISA'),
            ),
            const SizedBox(height: 12),
            _buildPaymentMethodButton(
              context,
              'üè¶ Chuy·ªÉn kho·∫£n ng√¢n h√†ng',
              'BANK_TRANSFER',
              Colors.green,
              () => _processPayment(totalCost, 'BANK_TRANSFER'),
            ),
            const SizedBox(height: 12),
            _buildPaymentMethodButton(
              context,
              'üí∞ V√≠ ƒëi·ªán t·ª≠ (Momo, ZaloPay)',
              'MOMO',
              Colors.orange,
              () => _processPayment(totalCost, 'MOMO'),
            ),
            const SizedBox(height: 12),
            _buildPaymentMethodButton(
              context,
              'üé≠ Thanh to√°n gi·∫£ l·∫≠p (Test)',
              'MOMO',
              Colors.purple,
              () => _processPayment(totalCost, 'MOMO'),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('H·ªßy'),
          ),
        ],
      ),
    );
  }

  Widget _buildPaymentMethodButton(
    BuildContext context,
    String title,
    String method,
    Color color,
    VoidCallback onPressed,
  ) {
    return SizedBox(
      width: double.infinity,
      child: ElevatedButton(
        onPressed: onPressed,
        style: ElevatedButton.styleFrom(
          backgroundColor: color,
          foregroundColor: Colors.white,
          padding: const EdgeInsets.symmetric(vertical: 12),
          shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(8)),
        ),
        child: Text(title, style: const TextStyle(fontSize: 14)),
      ),
    );
  }

  void _processPayment(double totalCost, String method) {
    Navigator.pop(context); // Close payment options dialog

    if (method == 'MOCK') {
      // Thanh to√°n gi·∫£ l·∫≠p - th√†nh c√¥ng ngay l·∫≠p t·ª©c
      _showMockPaymentSuccess(totalCost, method);
    } else {
      // C√°c ph∆∞∆°ng th·ª©c thanh to√°n th·ª±c t·∫ø - hi·ªÉn th·ªã loading
      _showRealPaymentProcessing(totalCost, method);
    }
  }

  void _showRealPaymentProcessing(double totalCost, String method) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('ƒêang x·ª≠ l√Ω thanh to√°n'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const CircularProgressIndicator(),
            const SizedBox(height: 16),
            Text('ƒêang x·ª≠ l√Ω thanh to√°n ${_getPaymentMethodName(method)}...'),
            const SizedBox(height: 8),
            Text('S·ªë ti·ªÅn: ${totalCost.toStringAsFixed(0)} VND'),
          ],
        ),
      ),
    );

    // Simulate payment processing time
    Future.delayed(const Duration(seconds: 3), () {
      Navigator.pop(context); // Close processing dialog
      _showPaymentResult(totalCost, method, true); // Assume success
    });
  }

  void _showMockPaymentSuccess(double totalCost, String method) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('üéâ Thanh to√°n th√†nh c√¥ng!'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.check_circle, color: Colors.green, size: 48),
            const SizedBox(height: 16),
            Text('Ph∆∞∆°ng th·ª©c: ${_getPaymentMethodName(method)}'),
            Text('S·ªë ti·ªÅn: ${totalCost.toStringAsFixed(0)} VND'),
            const SizedBox(height: 8),
            const Text(
              'Thanh to√°n gi·∫£ l·∫≠p th√†nh c√¥ng!\nM√£ QR check-in ƒë√£ ƒë∆∞·ª£c t·∫°o.',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.green),
            ),
          ],
        ),
        actions: [
          ElevatedButton(
            onPressed: () {
              Navigator.pop(context);
              _createBookingAfterPayment();
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('T·∫°o m√£ QR check-in'),
          ),
        ],
      ),
    );
  }

  void _showPaymentResult(double totalCost, String method, bool success) {
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: Text(
          success ? '‚úÖ Thanh to√°n th√†nh c√¥ng!' : '‚ùå Thanh to√°n th·∫•t b·∫°i!',
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Icon(
              success ? Icons.check_circle : Icons.error,
              color: success ? Colors.green : Colors.red,
              size: 48,
            ),
            const SizedBox(height: 16),
            Text('Ph∆∞∆°ng th·ª©c: ${_getPaymentMethodName(method)}'),
            Text('S·ªë ti·ªÅn: ${totalCost.toStringAsFixed(0)} VND'),
            const SizedBox(height: 8),
            Text(
              success
                  ? 'Thanh to√°n th√†nh c√¥ng!\nƒêang chuy·ªÉn v·ªÅ trang ƒë·∫∑t ch·ªó...'
                  : 'Thanh to√°n th·∫•t b·∫°i!\nVui l√≤ng th·ª≠ l·∫°i.',
              textAlign: TextAlign.center,
              style: TextStyle(color: success ? Colors.green : Colors.red),
            ),
          ],
        ),
        actions: [
          if (success)
            ElevatedButton(
              onPressed: () {
                Navigator.pop(context);
                _createBookingAfterPayment();
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                foregroundColor: Colors.white,
              ),
              child: const Text('Xem ƒë·∫∑t ch·ªó c·ªßa t√¥i'),
            )
          else
            ElevatedButton(
              onPressed: () => Navigator.pop(context),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.red,
                foregroundColor: Colors.white,
              ),
              child: const Text('Th·ª≠ l·∫°i'),
            ),
        ],
      ),
    );
  }

  String _getPaymentMethodName(String method) {
    switch (method) {
      case 'VISA':
        return 'Th·∫ª ATM/Visa/Mastercard';
      case 'BANK_TRANSFER':
        return 'Chuy·ªÉn kho·∫£n ng√¢n h√†ng';
      case 'MOMO':
        return 'V√≠ ƒëi·ªán t·ª≠';
      case 'MOCK':
        return 'Thanh to√°n gi·∫£ l·∫≠p';
      default:
        return 'Ph∆∞∆°ng th·ª©c kh√°c';
    }
  }

  Future<void> _createBookingAfterPayment() async {
    try {
      final startTime = widget.selectedTimeSlots.first.startTime;
      final totalDuration = widget.selectedTimeSlots.length * 60;

      final request = FacilityBookingCreateRequest(
        facilityId: widget.facility.id,
        userId: 1, // TODO: Get from auth context
        bookingTime: startTime,
        duration: totalDuration,
        numberOfPeople: _numberOfPeople,
        purpose: _purpose,
        paymentStatus: 'PAID', // ƒê√°nh d·∫•u ƒë√£ thanh to√°n
        paymentMethod: 'MOMO', // Thanh to√°n gi·∫£ l·∫≠p
        totalCost: widget.selectedTimeSlots.length * widget.facility.usageFee,
      );

      // Reset form state
      ref.read(bookingFormNotifierProvider.notifier).reset();

      // Update form with request data
      ref.read(bookingFormNotifierProvider.notifier).updateRequest(request);

      // Create booking
      final booking = await ref
          .read(bookingFormNotifierProvider.notifier)
          .createBooking();

      if (booking != null) {
        // Refresh bookings list ƒë·ªÉ hi·ªÉn th·ªã tr·∫°ng th√°i m·ªõi
        ref.invalidate(bookingsNotifierProvider);

        // Show success message
        if (context.mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('ƒê·∫∑t ch·ªó th√†nh c√¥ng! M√£ QR ƒë√£ ƒë∆∞·ª£c t·∫°o.'),
              backgroundColor: Colors.green,
            ),
          );

          // Sau khi thanh to√°n th√†nh c√¥ng, tr·ªü v·ªÅ trang bookings
          Navigator.popUntil(context, (route) => route.isFirst);
          Navigator.pushNamed(context, '/facility-bookings');
        }
      }
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('L·ªói t·∫°o booking: $e'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }

  String _formatDate(String dateString) {
    try {
      final date = DateTime.parse(dateString);
      final weekdays = [
        'Ch·ªß nh·∫≠t',
        'Th·ª© hai',
        'Th·ª© ba',
        'Th·ª© t∆∞',
        'Th·ª© nƒÉm',
        'Th·ª© s√°u',
        'Th·ª© b·∫£y',
      ];
      final months = [
        '',
        'Th√°ng 1',
        'Th√°ng 2',
        'Th√°ng 3',
        'Th√°ng 4',
        'Th√°ng 5',
        'Th√°ng 6',
        'Th√°ng 7',
        'Th√°ng 8',
        'Th√°ng 9',
        'Th√°ng 10',
        'Th√°ng 11',
        'Th√°ng 12',
      ];

      return '${weekdays[date.weekday % 7]}, ${date.day} ${months[date.month]} ${date.year}';
    } catch (e) {
      return dateString;
    }
  }

  String _formatTime(String timeString) {
    try {
      final time = DateTime.parse(timeString);
      return '${time.hour.toString().padLeft(2, '0')}:${time.minute.toString().padLeft(2, '0')}';
    } catch (e) {
      return timeString;
    }
  }
}
