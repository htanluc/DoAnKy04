import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:qr_flutter/qr_flutter.dart';
import 'package:share_plus/share_plus.dart';
import '../facilities/ui/facilities_screen.dart';
import '../facilities/providers/bookings_providers.dart';
import '../facilities/data/bookings_api.dart';
import '../facilities/models/booking.dart';
import '../facilities/ui/widgets/booking_card.dart';

class FacilityBookingsPage extends ConsumerStatefulWidget {
  const FacilityBookingsPage({super.key});

  @override
  ConsumerState<FacilityBookingsPage> createState() =>
      _FacilityBookingsPageState();
}

class _FacilityBookingsPageState extends ConsumerState<FacilityBookingsPage> {
  String _selectedFilter = 'T·∫•t c·∫£'; // Default filter

  @override
  void initState() {
    super.initState();
    // Auto-refresh khi v√†o trang ƒë·ªÉ l·∫•y d·ªØ li·ªáu m·ªõi nh·∫•t
    WidgetsBinding.instance.addPostFrameCallback((_) {
      ref.invalidate(myBookingsProvider);
    });
  }

  @override
  Widget build(BuildContext context) {
    final bookingsAsync = ref.watch(myBookingsProvider);

    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: const Text(
          'ƒê·∫∑t ch·ªó c·ªßa t√¥i',
          style: TextStyle(fontWeight: FontWeight.bold, color: Colors.white),
        ),
        backgroundColor: const Color(0xFF1976D2), // FPT Blue
        elevation: 0,
        actions: [
          // Filter dropdown
          PopupMenuButton<String>(
            icon: const Icon(Icons.filter_list, color: Colors.white),
            onSelected: (String value) {
              setState(() {
                _selectedFilter = value;
              });
            },
            itemBuilder: (BuildContext context) => [
              const PopupMenuItem(value: 'T·∫•t c·∫£', child: Text('T·∫•t c·∫£')),
              const PopupMenuItem(
                value: 'Ch·ªù thanh to√°n',
                child: Text('Ch·ªù thanh to√°n'),
              ),
              const PopupMenuItem(
                value: 'ƒê√£ x√°c nh·∫≠n',
                child: Text('ƒê√£ x√°c nh·∫≠n'),
              ),
              const PopupMenuItem(value: 'ƒê√£ h·ªßy', child: Text('ƒê√£ h·ªßy')),
              const PopupMenuItem(value: 'T·ª´ ch·ªëi', child: Text('T·ª´ ch·ªëi')),
            ],
          ),
          IconButton(
            onPressed: () => ref.invalidate(myBookingsProvider),
            icon: const Icon(Icons.refresh, color: Colors.white),
          ),
        ],
      ),
      body: bookingsAsync.when(
        loading: () => _buildLoadingState(),
        error: (error, stackTrace) =>
            _buildErrorState(context, ref, error.toString()),
        data: (bookings) => _buildBookingsList(context, ref, bookings),
      ),
      floatingActionButton: FloatingActionButton.extended(
        onPressed: () => _navigateToFacilities(context),
        icon: const Icon(Icons.add, color: Colors.white),
        label: const Text('', style: TextStyle(color: Colors.white)),
        backgroundColor: const Color(0xFF1976D2),
      ),
    );
  }

  Widget _buildLoadingState() {
    return const Center(
      child: Column(
        mainAxisAlignment: MainAxisAlignment.center,
        children: [
          CircularProgressIndicator(
            valueColor: AlwaysStoppedAnimation<Color>(Color(0xFF1976D2)),
          ),
          SizedBox(height: 16),
          Text(
            'ƒêang t·∫£i danh s√°ch ƒë·∫∑t ch·ªó...',
            style: TextStyle(fontSize: 16, color: Colors.grey),
          ),
        ],
      ),
    );
  }

  Widget _buildErrorState(BuildContext context, WidgetRef ref, String error) {
    return Center(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(Icons.error_outline, size: 64, color: Colors.red),
            const SizedBox(height: 16),
            Text(
              'L·ªói t·∫£i d·ªØ li·ªáu',
              style: Theme.of(
                context,
              ).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Text(
              error,
              textAlign: TextAlign.center,
              style: const TextStyle(color: Colors.grey),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: () {
                ref.invalidate(myBookingsProvider);
              },
              icon: const Icon(Icons.refresh),
              label: const Text('Th·ª≠ l·∫°i'),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF1976D2),
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBookingsList(
    BuildContext context,
    WidgetRef ref,
    List<FacilityBooking> bookings,
  ) {
    // √Åp d·ª•ng filter
    List<FacilityBooking> filteredBookings = _filterBookings(bookings);

    if (filteredBookings.isEmpty) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            const Icon(
              Icons.calendar_today_outlined,
              size: 64,
              color: Colors.grey,
            ),
            const SizedBox(height: 16),
            Text(
              _selectedFilter == 'T·∫•t c·∫£'
                  ? 'Ch∆∞a c√≥ ƒë·∫∑t ch·ªó n√†o'
                  : 'Kh√¥ng c√≥ ƒë·∫∑t ch·ªó ${_selectedFilter.toLowerCase()}',
              style: Theme.of(
                context,
              ).textTheme.headlineSmall?.copyWith(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 8),
            Text(
              _selectedFilter == 'T·∫•t c·∫£'
                  ? 'H√£y ƒë·∫∑t ti·ªán √≠ch ƒë·∫ßu ti√™n c·ªßa b·∫°n'
                  : 'H√£y th·ª≠ ch·ªçn b·ªô l·ªçc kh√°c',
              style: const TextStyle(color: Colors.grey),
            ),
            const SizedBox(height: 24),
            ElevatedButton.icon(
              onPressed: () => _navigateToFacilities(context),
              icon: const Icon(Icons.add),
              label: const Text('ƒê·∫∑t ti·ªán √≠ch'),
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF1976D2),
                foregroundColor: Colors.white,
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: () async {
        ref.invalidate(myBookingsProvider);
      },
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: filteredBookings.length,
        itemBuilder: (context, index) {
          final booking = filteredBookings[index];
          return Padding(
            padding: const EdgeInsets.only(bottom: 16),
            child: BookingCard(
              booking: booking,
              onTap: () => _showBookingDetails(context, ref, booking),
              onCancel: () => _cancelBooking(context, ref, booking),
              onPayNow: () => _payBooking(context, ref, booking),
            ),
          );
        },
      ),
    );
  }

  /// Filter bookings theo tr·∫°ng th√°i ƒë∆∞·ª£c ch·ªçn
  List<FacilityBooking> _filterBookings(List<FacilityBooking> bookings) {
    if (_selectedFilter == 'T·∫•t c·∫£') {
      return bookings;
    }

    return bookings.where((booking) {
      switch (_selectedFilter) {
        case 'Ch·ªù thanh to√°n':
          return booking.status.toUpperCase() == 'PENDING';
        case 'ƒê√£ x√°c nh·∫≠n':
          return booking.status.toUpperCase() == 'CONFIRMED' ||
              booking.status.toUpperCase() == 'APPROVED';
        case 'ƒê√£ h·ªßy':
          return booking.status.toUpperCase() == 'CANCELLED';
        case 'T·ª´ ch·ªëi':
          return booking.status.toUpperCase() == 'REJECTED';
        default:
          return true;
      }
    }).toList();
  }

  void _navigateToFacilities(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (context) => const FacilitiesScreen()),
    );
  }

  void _showBookingDetails(
    BuildContext context,
    WidgetRef ref,
    FacilityBooking booking,
  ) {
    if (booking.status.toUpperCase() == 'CONFIRMED' && booking.qrCode != null) {
      // Hi·ªÉn th·ªã QR code cho booking ƒë√£ thanh to√°n
      _showQRCode(context, booking);
    } else {
      // Hi·ªÉn th·ªã chi ti·∫øt booking th√¥ng th∆∞·ªùng
      showDialog(
        context: context,
        builder: (context) => AlertDialog(
          title: Text(booking.facilityName),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Ng√†y: ${_formatDate(booking.startTime)}'),
              Text(
                'Th·ªùi gian: ${_formatTime(booking.startTime, booking.endTime)}',
              ),
              Text('S·ªë ng∆∞·ªùi: ${booking.numberOfPeople}'),
              Text('M·ª•c ƒë√≠ch: ${booking.purpose ?? 'Kh√¥ng c√≥ m·ª•c ƒë√≠ch'}'),
              Text('Tr·∫°ng th√°i: ${_getStatusText(booking.status)}'),
              if (booking.totalCost != null)
                Text('Chi ph√≠: ${booking.totalCost!.toStringAsFixed(0)} VND'),
            ],
          ),
          actions: [
            if (booking.status.toUpperCase() == 'PENDING')
              ElevatedButton(
                onPressed: () {
                  Navigator.pop(context);
                  _payBooking(context, ref, booking);
                },
                style: ElevatedButton.styleFrom(
                  backgroundColor: Colors.green,
                  foregroundColor: Colors.white,
                ),
                child: const Text('üí≥ Thanh to√°n'),
              ),
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('ƒê√≥ng'),
            ),
          ],
        ),
      );
    }
  }

  void _showQRCode(BuildContext context, FacilityBooking booking) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('M√£ QR - ${booking.facilityName}'),
        content: Container(
          constraints: BoxConstraints(
            maxHeight: MediaQuery.of(context).size.height * 0.6,
          ),
          child: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // QR Code
                Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.white,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.grey.shade300),
                  ),
                  child: SizedBox(
                    width: 200,
                    height: 200,
                    child: booking.qrCode != null
                        ? QrImageView(
                            data: booking.qrCode!,
                            version: QrVersions.auto,
                            size: 200.0,
                          )
                        : const Icon(
                            Icons.qr_code,
                            size: 200,
                            color: Colors.grey,
                          ),
                  ),
                ),
                const SizedBox(height: 16),
                // Booking info
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade50,
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Column(
                    children: [
                      Text('Ng√†y: ${_formatDate(booking.startTime)}'),
                      Text(
                        'Th·ªùi gian: ${_formatTime(booking.startTime, booking.endTime)}',
                      ),
                      Text('S·ªë ng∆∞·ªùi: ${booking.numberOfPeople}'),
                      if (booking.qrExpiresAt != null)
                        Text(
                          'H·∫øt h·∫°n: ${_formatDateTime(booking.qrExpiresAt!)}',
                        ),
                    ],
                  ),
                ),
              ],
            ),
          ),
        ),
        actions: [
          ElevatedButton.icon(
            onPressed: () {
              Navigator.pop(context);
              _shareQRCode(context, booking);
            },
            icon: const Icon(Icons.share),
            label: const Text('Chia s·∫ª'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue,
              foregroundColor: Colors.white,
            ),
          ),
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }

  void _shareQRCode(BuildContext context, FacilityBooking booking) {
    final shareText =
        '''
M√£ QR check-in ti·ªán √≠ch:

üè¢ Ti·ªán √≠ch: ${booking.facilityName}
üìÖ Ng√†y: ${_formatDate(booking.startTime)}
‚è∞ Th·ªùi gian: ${_formatTime(booking.startTime, booking.endTime)}
üë• S·ªë ng∆∞·ªùi: ${booking.numberOfPeople}
üÜî M√£ ƒë·∫∑t ch·ªó: ${booking.id}

Qu√©t m√£ QR ƒë·ªÉ check-in s·ª≠ d·ª•ng ti·ªán √≠ch.
    ''';
    Share.share(shareText);
  }

  String _formatDateTime(String dateTimeString) {
    try {
      final dateTime = DateTime.parse(dateTimeString);
      return '${dateTime.day}/${dateTime.month}/${dateTime.year} ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
    } catch (e) {
      return dateTimeString;
    }
  }

  void _payBooking(
    BuildContext context,
    WidgetRef ref,
    FacilityBooking booking,
  ) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Thanh to√°n ƒë·∫∑t ch·ªó'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Ti·ªán √≠ch: ${booking.facilityName}'),
            Text('Ng√†y: ${_formatDate(booking.startTime)}'),
            Text(
              'Th·ªùi gian: ${_formatTime(booking.startTime, booking.endTime)}',
            ),
            Text('S·ªë ng∆∞·ªùi: ${booking.numberOfPeople}'),
            const Divider(),
            Text(
              'T·ªïng chi ph√≠: ${booking.totalCost?.toStringAsFixed(0) ?? '0'} VND',
              style: const TextStyle(
                fontWeight: FontWeight.bold,
                fontSize: 16,
                color: Colors.red,
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('H·ªßy'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              _processPayment(context, ref, booking);
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('üí≥ Thanh to√°n'),
          ),
        ],
      ),
    );
  }

  void _processPayment(
    BuildContext context,
    WidgetRef ref,
    FacilityBooking booking,
  ) {
    // Hi·ªÉn th·ªã dialog thanh to√°n gi·∫£ l·∫≠p
    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => AlertDialog(
        title: const Text('üéâ Thanh to√°n th√†nh c√¥ng!'),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const Icon(Icons.check_circle, color: Colors.green, size: 48),
            const SizedBox(height: 16),
            Text(
              'S·ªë ti·ªÅn: ${booking.totalCost?.toStringAsFixed(0) ?? '0'} VND',
            ),
            const SizedBox(height: 8),
            const Text(
              'Thanh to√°n gi·∫£ l·∫≠p th√†nh c√¥ng!\nM√£ QR check-in ƒë√£ ƒë∆∞·ª£c t·∫°o.',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.green),
            ),
          ],
        ),
        actions: [
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              try {
                // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t payment status
                await _updatePaymentStatus(ref, booking);

                // Refresh bookings list
                ref.invalidate(myBookingsProvider);

                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text(
                        'Thanh to√°n th√†nh c√¥ng! M√£ QR ƒë√£ ƒë∆∞·ª£c t·∫°o.',
                      ),
                      backgroundColor: Colors.green,
                    ),
                  );
                }
              } catch (e) {
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('L·ªói c·∫≠p nh·∫≠t thanh to√°n: $e'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.green,
              foregroundColor: Colors.white,
            ),
            child: const Text('Xem m√£ QR'),
          ),
        ],
      ),
    );
  }

  Future<void> _updatePaymentStatus(
    WidgetRef ref,
    FacilityBooking booking,
  ) async {
    try {
      print('DEBUG: Updating payment for booking ID: ${booking.id}');
      print(
        'DEBUG: Booking details: ${booking.facilityName}, ${booking.startTime}',
      );

      // G·ªçi API ƒë·ªÉ c·∫≠p nh·∫≠t payment status
      await BookingsApi.updatePaymentStatus(
        bookingId: booking.id,
        paymentStatus: 'PAID',
        paymentMethod: 'MOMO', // Thanh to√°n gi·∫£ l·∫≠p
        totalCost: booking.totalCost,
        transactionId: 'TXN_${DateTime.now().millisecondsSinceEpoch}',
      );

      // Refresh bookings list
      ref.invalidate(myBookingsProvider);
    } catch (e) {
      print('Error updating payment status: $e');
      rethrow;
    }
  }

  void _cancelBooking(
    BuildContext context,
    WidgetRef ref,
    FacilityBooking booking,
  ) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('H·ªßy ƒë·∫∑t ch·ªó'),
        content: const Text('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒë·∫∑t ch·ªó n√†y?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('Kh√¥ng'),
          ),
          ElevatedButton(
            onPressed: () async {
              Navigator.pop(context);
              try {
                await ref
                    .read(bookingsNotifierProvider.notifier)
                    .cancelBooking(booking.id);
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('ƒê√£ h·ªßy ƒë·∫∑t ch·ªó th√†nh c√¥ng'),
                      backgroundColor: Colors.green,
                    ),
                  );
                }
              } catch (e) {
                if (context.mounted) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('L·ªói h·ªßy ƒë·∫∑t ch·ªó: $e'),
                      backgroundColor: Colors.red,
                    ),
                  );
                }
              }
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red,
              foregroundColor: Colors.white,
            ),
            child: const Text('C√≥'),
          ),
        ],
      ),
    );
  }

  String _formatDate(String dateTimeString) {
    try {
      final date = DateTime.parse(dateTimeString);
      final weekdays = [
        'Ch·ªß nh·∫≠t',
        'Th·ª© hai',
        'Th·ª© ba',
        'Th·ª© t∆∞',
        'Th·ª© nƒÉm',
        'Th·ª© s√°u',
        'Th·ª© b·∫£y',
      ];
      final months = [
        '',
        'Th√°ng 1',
        'Th√°ng 2',
        'Th√°ng 3',
        'Th√°ng 4',
        'Th√°ng 5',
        'Th√°ng 6',
        'Th√°ng 7',
        'Th√°ng 8',
        'Th√°ng 9',
        'Th√°ng 10',
        'Th√°ng 11',
        'Th√°ng 12',
      ];

      return '${weekdays[date.weekday % 7]}, ${date.day} ${months[date.month]} ${date.year}';
    } catch (e) {
      return dateTimeString;
    }
  }

  String _formatTime(String startTimeString, String endTimeString) {
    try {
      final start = DateTime.parse(startTimeString);
      final end = DateTime.parse(endTimeString);

      final startTime =
          '${start.hour.toString().padLeft(2, '0')}:${start.minute.toString().padLeft(2, '0')}';
      final endTime =
          '${end.hour.toString().padLeft(2, '0')}:${end.minute.toString().padLeft(2, '0')}';

      return '$startTime - $endTime';
    } catch (e) {
      return '$startTimeString - $endTimeString';
    }
  }

  String _getStatusText(String status) {
    switch (status.toUpperCase()) {
      case 'PENDING':
        return 'Ch·ªù x√°c nh·∫≠n';
      case 'APPROVED':
      case 'CONFIRMED':
        return 'ƒê√£ x√°c nh·∫≠n';
      case 'REJECTED':
        return 'T·ª´ ch·ªëi';
      case 'CANCELLED':
        return 'ƒê√£ h·ªßy';
      default:
        return status;
    }
  }
}
