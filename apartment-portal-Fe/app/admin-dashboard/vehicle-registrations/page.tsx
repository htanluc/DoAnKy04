"use client";

import React, { useState, useEffect } from 'react';
import AdminLayout from '@/components/admin/AdminLayout';
import { useLanguage } from '@/lib/i18n';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Plus, Car, Bike, Truck, Settings } from 'lucide-react';
import { vehiclesApi, Vehicle } from '@/lib/api';
import VehicleCapacityOverview from '@/components/admin/VehicleCapacityOverview';
import VehicleCapacityManager from '@/components/admin/VehicleCapacityManager';
import CapacityWarningCard from '@/components/admin/CapacityWarningCard';
import { useVehicleCapacity } from '@/hooks/use-vehicle-capacity';
import Link from 'next/link';

const getVehicleTypeIcon = (type: string) => {
  switch (type.toLowerCase()) {
    case 'motorcycle':
    case 'xe m√°y':
      return <Bike className="h-4 w-4" />;
    case 'bicycle':
    case 'xe ƒë·∫°p':
      return <Bike className="h-4 w-4" />;
    case 'car':
    case '√¥ t√¥':
      return <Car className="h-4 w-4" />;
    case 'truck':
    case 'xe t·∫£i':
      return <Truck className="h-4 w-4" />;
    default:
      return <Car className="h-4 w-4" />;
  }
};

const getStatusBadge = (status: string, statusDisplayName?: string) => {
  const displayName = statusDisplayName || status;
  switch (status.toUpperCase()) {
    case 'PENDING':
      return <Badge variant="secondary" className="bg-yellow-100 text-yellow-800">{displayName}</Badge>;
    case 'APPROVED':
      return <Badge variant="default" className="bg-green-100 text-green-800">{displayName}</Badge>;
    case 'REJECTED':
      return <Badge variant="destructive">{displayName}</Badge>;
    default:
      return <Badge variant="outline">{displayName}</Badge>;
  }
};

export default function VehicleRegistrationsPage() {
  const { t } = useLanguage();
  const { getConfigByBuilding, configs } = useVehicleCapacity();
  
  // Debug: Log t·∫•t c·∫£ c·∫•u h√¨nh ƒë·ªÉ ki·ªÉm tra
  useEffect(() => {
    console.log('=== VEHICLE CAPACITY CONFIGS ===');
    console.log('All configs:', configs);
    console.log('Configs length:', configs?.length);
    
    if (configs && configs.length > 0) {
      configs.forEach((config, index) => {
        console.log(`Config ${index + 1}:`, {
          id: config.id,
          buildingId: config.buildingId,
          maxCars: config.maxCars,
          maxMotorcycles: config.maxMotorcycles,
          currentCars: config.currentCars,
          currentMotorcycles: config.currentMotorcycles,
          isActive: config.isActive
        });
      });
    } else {
      console.log('‚ùå No configs found!');
    }
    console.log('=== END CONFIGS ===');
  }, [configs]);
  const [searchTerm, setSearchTerm] = useState('');
  const [vehicles, setVehicles] = useState<Vehicle[]>([]);
  const [allVehicles, setAllVehicles] = useState<Vehicle[]>([]);
  const [loading, setLoading] = useState(true);
  const [allVehiclesLoading, setAllVehiclesLoading] = useState(false);
  const [filteredVehicles, setFilteredVehicles] = useState<Vehicle[]>([]);
  const [filteredAllVehicles, setFilteredAllVehicles] = useState<Vehicle[]>([]);

  
  // Modal states
  const [rejectingId, setRejectingId] = useState<number | null>(null);
  const [rejectionReason, setRejectionReason] = useState<string>('');
  const [showRejectModal, setShowRejectModal] = useState<boolean>(false);
  const [cancelId, setCancelId] = useState<number | null>(null);
  const [showCancelModal, setShowCancelModal] = useState<boolean>(false);
  const [cancelling, setCancelling] = useState<boolean>(false);
  const [cancelReason, setCancelReason] = useState<string>('');
  const [cancelError, setCancelError] = useState<string>('');

  // Load pending vehicles
  useEffect(() => {
    const loadPendingVehicles = async () => {
      try {
        setLoading(true);
        const data = await vehiclesApi.getPending();
        console.log('Loaded pending vehicles:', data);
        setVehicles(data);
        setFilteredVehicles(data);
      } catch (error) {
        console.error('Error loading pending vehicles:', error);
      } finally {
        setLoading(false);
      }
    };

    loadPendingVehicles();
  }, []);

  // Load all vehicles
  useEffect(() => {
    const loadAllVehicles = async () => {
      try {
        setAllVehiclesLoading(true);
        const data = await vehiclesApi.getAll();
        setAllVehicles(data);
        setFilteredAllVehicles(data);
      } catch (error) {
        console.error('Error loading all vehicles:', error);
      } finally {
        setAllVehiclesLoading(false);
      }
    };

    loadAllVehicles();
  }, []);



  // Filter pending vehicles
  useEffect(() => {
    const filtered = vehicles.filter(vehicle =>
      (vehicle.userFullName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
      (vehicle.licensePlate || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
      (vehicle.apartmentUnitNumber || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
      (vehicle.vehicleTypeDisplayName || vehicle.vehicleType || '').toLowerCase().includes(searchTerm.toLowerCase())
    );
    
    setFilteredVehicles(filtered);
  }, [searchTerm, vehicles]);

  // Filter all vehicles
  useEffect(() => {
    const filtered = allVehicles.filter(vehicle =>
      (vehicle.userFullName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
      (vehicle.licensePlate || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
      (vehicle.apartmentUnitNumber || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
      (vehicle.vehicleTypeDisplayName || vehicle.vehicleType || '').toLowerCase().includes(searchTerm.toLowerCase())
    );
    setFilteredAllVehicles(filtered);
  }, [searchTerm, allVehicles]);

  // Ki·ªÉm tra kh·∫£ nƒÉng duy·ªát xe d·ª±a tr√™n gi·ªõi h·∫°n
  const canApproveVehicle = (vehicle: Vehicle) => {
    // Debug: Log th√¥ng tin ƒë·ªÉ ki·ªÉm tra
    console.log('=== CHECKING VEHICLE APPROVAL ===');
    console.log('Vehicle:', {
      id: vehicle.id,
      apartmentUnitNumber: vehicle.apartmentUnitNumber,
      vehicleType: vehicle.vehicleType,
      vehicleTypeDisplayName: vehicle.vehicleTypeDisplayName
    });

    // L·∫•y building ID t·ª´ apartment unit number
    // Format c√≥ th·ªÉ l√†: A03-04, A01-02, B-101, C-201, ho·∫∑c s·ªë tr·ª±c ti·∫øp nh∆∞ 26
    let buildingId: number | null = null;
    
    // Th·ª≠ format A03-04 -> t√≤a A (1)
    const formatAMatch = vehicle.apartmentUnitNumber?.match(/^([A-Z])(\d+)-/);
    if (formatAMatch) {
      const buildingLetter = formatAMatch[1];
      buildingId = buildingLetter.charCodeAt(0) - 64; // A=1, B=2, C=3...
      console.log('‚úÖ Detected building from format A:', buildingLetter, '->', buildingId);
    }
    
    // Th·ª≠ format s·ªë tr·ª±c ti·∫øp nh∆∞ 26
    if (!buildingId) {
      const numberMatch = vehicle.apartmentUnitNumber?.match(/^(\d+)/);
      if (numberMatch) {
        buildingId = parseInt(numberMatch[1]);
        console.log('‚úÖ Detected building from number:', buildingId);
      }
    }
    
    // N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh t√≤a nh√†, s·ª≠ d·ª•ng t√≤a m·∫∑c ƒë·ªãnh (26)
    if (!buildingId) {
      buildingId = 26; // T√≤a m·∫∑c ƒë·ªãnh t·ª´ d·ªØ li·ªáu
      console.log('‚ö†Ô∏è Using default building:', buildingId);
    }
    
    // Th·ª≠ t√¨m c·∫•u h√¨nh cho t√≤a nh√† n√†y
    let config = getConfigByBuilding(buildingId);
    
    // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m t√≤a 26 (t√≤a m·∫∑c ƒë·ªãnh)
    if (!config && buildingId !== 26) {
      console.log('üîç Config not found for building', buildingId, ', trying building 26...');
      config = getConfigByBuilding(26);
      if (config) {
        console.log('‚úÖ Found config for building 26, using it instead');
      }
    }

    // Fallback: d√πng c·∫•u h√¨nh ho·∫°t ƒë·ªông ƒë·∫ßu ti√™n ƒë·ªÉ kh√¥ng kh√≥a h√†nh ƒë·ªông khi b√£i c√≤n ch·ªó
    if (!config) {
      const active = (configs || []).find(c => c.isActive);
      if (active) {
        console.log('‚ÑπÔ∏è Using first active config as fallback');
        config = active as any;
      }
    }
    
    console.log('üè¢ Building config for ID', buildingId, ':', config);
    
    if (!config || !config.isActive) {
      console.log('‚ùå No config or inactive, disallow approval');
      return false; // Kh√¥ng c√≥ c·∫•u h√¨nh ho·∫∑c c·∫•u h√¨nh t·∫Øt: kh√¥ng cho duy·ªát/kh√¥i ph·ª•c
    }

    // Ki·ªÉm tra lo·∫°i xe
    const vehicleType = vehicle.vehicleType?.toLowerCase();
    const vehicleTypeDisplay = vehicle.vehicleTypeDisplayName?.toLowerCase();
    
    console.log('üöó Vehicle type check:', {
      vehicleType,
      vehicleTypeDisplay,
      isMotorcycle: vehicleType?.includes('motorcycle') || vehicleTypeDisplay?.includes('xe m√°y') || 
                   vehicleType?.includes('xe ƒë·∫°p') || vehicleTypeDisplay?.includes('xe ƒë·∫°p'),
      isCar: vehicleType?.includes('car') || vehicleTypeDisplay?.includes('√¥ t√¥')
    });
    
    let canApprove = true;
    
    if (vehicleType?.includes('motorcycle') || vehicleTypeDisplay?.includes('xe m√°y') || 
        vehicleType?.includes('xe ƒë·∫°p') || vehicleTypeDisplay?.includes('xe ƒë·∫°p')) {
      canApprove = (config.currentMotorcycles || 0) < config.maxMotorcycles;
      console.log('üèçÔ∏è Motorcycle check:', config.currentMotorcycles, '/', config.maxMotorcycles, '->', canApprove);
    } else if (vehicleType?.includes('car') || vehicleTypeDisplay?.includes('√¥ t√¥')) {
      canApprove = (config.currentCars || 0) < config.maxCars;
      console.log('üöô Car check:', config.currentCars, '/', config.maxCars, '->', canApprove);
    } else {
      console.log('‚ùì Unknown vehicle type, allowing approval');
    }
    
    console.log('üéØ Final approval result:', canApprove);
    console.log('=== END CHECK ===');
    return canApprove;
  };

  // L·∫•y th√¥ng tin gi·ªõi h·∫°n xe
  const getVehicleCapacityInfo = (vehicle: Vehicle) => {
    // Debug: Log th√¥ng tin ƒë·ªÉ ki·ªÉm tra
    console.log('=== GETTING VEHICLE CAPACITY INFO ===');
    console.log('Vehicle:', {
      id: vehicle.id,
      apartmentUnitNumber: vehicle.apartmentUnitNumber,
      vehicleType: vehicle.vehicleType,
      vehicleTypeDisplayName: vehicle.vehicleTypeDisplayName
    });

    // L·∫•y building ID t·ª´ apartment unit number
    let buildingId: number | null = null;
    
    // Th·ª≠ format A03-04 -> t√≤a A (1)
    const formatAMatch = vehicle.apartmentUnitNumber?.match(/^([A-Z])(\d+)-/);
    if (formatAMatch) {
      const buildingLetter = formatAMatch[1];
      buildingId = buildingLetter.charCodeAt(0) - 64; // A=1, B=2, C=3...
      console.log('‚úÖ Detected building from format A:', buildingLetter, '->', buildingId);
    }
    
    // Th·ª≠ format s·ªë tr·ª±c ti·∫øp nh∆∞ 26
    if (!buildingId) {
      const numberMatch = vehicle.apartmentUnitNumber?.match(/^(\d+)/);
      if (numberMatch) {
        buildingId = parseInt(numberMatch[1]);
        console.log('‚úÖ Detected building from number:', buildingId);
      }
    }
    
    // N·∫øu kh√¥ng th·ªÉ x√°c ƒë·ªãnh t√≤a nh√†, s·ª≠ d·ª•ng t√≤a m·∫∑c ƒë·ªãnh (26)
    if (!buildingId) {
      buildingId = 26; // T√≤a m·∫∑c ƒë·ªãnh t·ª´ d·ªØ li·ªáu
      console.log('‚ö†Ô∏è Using default building:', buildingId);
    }
    
    // Th·ª≠ t√¨m c·∫•u h√¨nh cho t√≤a nh√† n√†y
    let config = getConfigByBuilding(buildingId);
    
    // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ t√¨m t√≤a 26 (t√≤a m·∫∑c ƒë·ªãnh)
    if (!config && buildingId !== 26) {
      console.log('üîç Config not found for building', buildingId, ', trying building 26...');
      config = getConfigByBuilding(26);
      if (config) {
        console.log('‚úÖ Found config for building 26, using it instead');
      }
    }

    // Fallback: d√πng c·∫•u h√¨nh ho·∫°t ƒë·ªông ƒë·∫ßu ti√™n ƒë·ªÉ lu√¥n hi·ªÉn th·ªã s·ªë li·ªáu
    if (!config) {
      const active = (configs || []).find(c => c.isActive);
      if (active) {
        console.log('‚ÑπÔ∏è Using first active config as fallback for display');
        config = active as any;
      }
    }
    
    console.log('üè¢ Building config for ID', buildingId, ':', config);
    
    if (!config) {
      console.log('‚ùå No config found, returning null');
      return null;
    }

    const vehicleType = vehicle.vehicleType?.toLowerCase();
    const vehicleTypeDisplay = vehicle.vehicleTypeDisplayName?.toLowerCase();
    
    console.log('üöó Vehicle type check:', {
      vehicleType,
      vehicleTypeDisplay,
      isMotorcycle: vehicleType?.includes('motorcycle') || vehicleTypeDisplay?.includes('xe m√°y') || 
                   vehicleType?.includes('xe ƒë·∫°p') || vehicleTypeDisplay?.includes('xe ƒë·∫°p'),
      isCar: vehicleType?.includes('car') || vehicleTypeDisplay?.includes('√¥ t√¥')
    });
    
    if (vehicleType?.includes('motorcycle') || vehicleTypeDisplay?.includes('xe m√°y') || 
        vehicleType?.includes('xe ƒë·∫°p') || vehicleTypeDisplay?.includes('xe ƒë·∫°p')) {
      const result = {
        max: config.maxMotorcycles,
        current: config.currentMotorcycles || 0,
        remaining: config.remainingMotorcycles || 0,
        label: 'Xe m√°y/Xe ƒë·∫°p'
      };
      console.log('üèçÔ∏è Motorcycle capacity info:', result);
      return result;
    } else if (vehicleType?.includes('car') || vehicleTypeDisplay?.includes('√¥ t√¥')) {
      const result = {
        max: config.maxCars,
        current: config.currentCars || 0,
        remaining: config.remainingCars || 0,
        label: '√î t√¥'
      };
      console.log('üöô Car capacity info:', result);
      return result;
    }
    
    console.log('‚ùì Unknown vehicle type, returning null');
    console.log('=== END CAPACITY INFO ===');
    return null;
  };

  const handleApprove = async (id: number) => {
    try {
      await vehiclesApi.updateStatus(id, 'APPROVED');
      // Remove from pending list
      setVehicles(prev => prev.filter(v => v.id !== id));
      setFilteredVehicles(prev => prev.filter(v => v.id !== id));
      // Refresh all vehicles list
      const allData = await vehiclesApi.getAll();
      setAllVehicles(allData);
      setFilteredAllVehicles(allData);
    } catch (error) {
      console.error('Error approving vehicle:', error);
    }
  };

  const handleReject = async () => {
    if (!rejectingId) return;
    try {
      await vehiclesApi.updateStatus(rejectingId, 'REJECTED', rejectionReason);
      // G·ª≠i mail th√¥ng b√°o l√Ω do t·ª´ ch·ªëi
      try { await vehiclesApi.notifyCancellation(rejectingId, rejectionReason); } catch {}
      // Remove from pending list
      setVehicles(prev => prev.filter(v => v.id !== rejectingId));
      setFilteredVehicles(prev => prev.filter(v => v.id !== rejectingId));
      // Close modal
      setShowRejectModal(false);
      setRejectingId(null);
      setRejectionReason('');
      // Refresh all vehicles list
      const allData = await vehiclesApi.getAll();
      setAllVehicles(allData);
      setFilteredAllVehicles(allData);
    } catch (error) {
      console.error('Error rejecting vehicle:', error);
    }
  };

  const handleCancel = async () => {
    if (!cancelId) return;
    try {
      setCancelling(true);
      if (!cancelReason.trim()) {
        setCancelError('Vui l√≤ng nh·∫≠p l√Ω do h·ªßy.');
        setCancelling(false);
        return;
      }
      await vehiclesApi.updateStatus(cancelId, 'REJECTED', cancelReason);
      try { await vehiclesApi.notifyCancellation(cancelId, cancelReason); } catch {}
      // C·∫≠p nh·∫≠t tr·∫°ng th√°i v·ªÅ REJECTED ƒë·ªÉ m·ª•c chuy·ªÉn sang tab T·ª´ ch·ªëi
      setAllVehicles(prev => prev.map(v => v.id === cancelId ? { ...v, status: 'REJECTED', statusDisplayName: 'T·ª´ ch·ªëi' } : v));
      setFilteredAllVehicles(prev => prev.map(v => v.id === cancelId ? { ...v, status: 'REJECTED', statusDisplayName: 'T·ª´ ch·ªëi' } : v));
      // Close modal
      setShowCancelModal(false);
      setCancelId(null);
      setCancelReason('');
      setCancelError('');
    } catch (error) {
      console.error('Error cancelling vehicle:', error);
    } finally {
      setCancelling(false);
    }
  };

  const handleRestore = async (id: number) => {
    try {
      // Ki·ªÉm tra s·ª©c ch·ª©a tr∆∞·ªõc khi kh√¥i ph·ª•c
      const vehicle = allVehicles.find(v => v.id === id);
      if (vehicle && !canApproveVehicle(vehicle)) {
        if (typeof window !== 'undefined') {
          window.alert('B√£i xe ƒë√£ ƒë·∫ßy ho·∫∑c c·∫•u h√¨nh kh√¥ng cho ph√©p. Kh√¥ng th·ªÉ kh√¥i ph·ª•c.');
        }
        return;
      }
      // Kh√¥i ph·ª•c v√† cho v√†o b√£i xe ngay: ƒë·∫∑t tr·∫°ng th√°i APPROVED
      await vehiclesApi.updateStatus(id, 'APPROVED');
      // C·∫≠p nh·∫≠t danh s√°ch t·∫•t c·∫£ xe
      setAllVehicles(prev => prev.map(v => v.id === id ? { ...v, status: 'APPROVED', statusDisplayName: 'ƒê√£ duy·ªát' } : v));
      setFilteredAllVehicles(prev => prev.map(v => v.id === id ? { ...v, status: 'APPROVED', statusDisplayName: 'ƒê√£ duy·ªát' } : v));
      // B·∫£o ƒë·∫£m kh√¥ng th√™m v√†o danh s√°ch pending
      setVehicles(prev => prev.filter(v => v.id !== id));
      setFilteredVehicles(prev => prev.filter(v => v.id !== id));
    } catch (error) {
      console.error('Error restoring vehicle:', error);
    }
  };

  const pendingCount = vehicles.length;
  const approvedCount = allVehicles.filter(v => v.status === 'APPROVED').length;
  const rejectedCount = allVehicles.filter(v => v.status === 'REJECTED').length;
  const totalCount = approvedCount; // Ch·ªâ t√≠nh xe ƒë√£ duy·ªát ·ªü tab T·∫•t c·∫£

  return (
    <AdminLayout title={t('admin.vehicleRegistrations.title', 'Qu·∫£n l√Ω ƒëƒÉng k√Ω xe')}>
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold tracking-tight">{t('admin.vehicleRegistrations.main.title', 'Qu·∫£n l√Ω ƒëƒÉng k√Ω xe')}</h1>
            <p className="text-muted-foreground">
              {t('admin.vehicleRegistrations.main.subtitle', 'Qu·∫£n l√Ω t·∫•t c·∫£ ƒëƒÉng k√Ω xe c·ªßa c∆∞ d√¢n')}
            </p>
          </div>
          <Button>
            <Plus className="mr-2 h-4 w-4" />
            {t('admin.vehicleRegistrations.actions.createNew', 'T·∫°o m·ªõi')}
          </Button>
        </div>

        <Tabs defaultValue="pending" className="space-y-4">
          <TabsList>
            <TabsTrigger value="pending">{t('admin.vehicleRegistrations.tabs.pending', 'Ch·ªù duy·ªát ({count})', { count: pendingCount })}</TabsTrigger>
            <TabsTrigger value="all">{t('admin.vehicleRegistrations.tabs.all', 'T·∫•t c·∫£ xe ({count})', { count: totalCount })}</TabsTrigger>
            <TabsTrigger value="approved">{t('admin.vehicleRegistrations.tabs.approved', 'ƒê√£ duy·ªát ({count})', { count: approvedCount })}</TabsTrigger>
            <TabsTrigger value="rejected">{t('admin.vehicleRegistrations.tabs.rejected', 'T·ª´ ch·ªëi ({count})', { count: rejectedCount })}</TabsTrigger>
            <TabsTrigger value="capacity-overview">
              <Settings className="mr-2 h-4 w-4" />
              {t('admin.vehicleRegistrations.capacity.overview.title', 'T·ªïng quan gi·ªõi h·∫°n')}
            </TabsTrigger>
            <TabsTrigger value="capacity-config">
              <Settings className="mr-2 h-4 w-4" />
              {t('admin.vehicleRegistrations.capacity.config.title', 'C·∫•u h√¨nh gi·ªõi h·∫°n')}
            </TabsTrigger>
          </TabsList>

           <TabsContent value="pending" className="space-y-4">
             <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
               {/* Card √î t√¥ */}
               <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                 <Link href="/admin-dashboard/vehicle-registrations/pending-cars">
                   <CardHeader>
                     <CardTitle className="flex items-center gap-2 text-blue-600">
                       <Car className="h-6 w-6" />
                       {t('admin.vehicleRegistrations.pending.cars.subtitle', '√î t√¥ ch·ªù duy·ªát ({count})', {
                         count: filteredVehicles.filter(v =>
                           (v.vehicleType?.toLowerCase().includes('car') ||
                            v.vehicleTypeDisplayName?.toLowerCase().includes('√¥ t√¥'))
                         ).length
                       })}
                     </CardTitle>
                     <CardDescription>
                       {t('admin.vehicleRegistrations.pending.cars.description', 'Danh s√°ch √¥ t√¥ ƒëang ch·ªù ph√™ duy·ªát')}
                     </CardDescription>
                   </CardHeader>
                   <CardContent>
                     <div className="text-center py-8">
                       <div className="text-2xl font-bold text-blue-600 mb-2">
                         {filteredVehicles.filter(v => 
                           (v.vehicleType?.toLowerCase().includes('car') || 
                            v.vehicleTypeDisplayName?.toLowerCase().includes('√¥ t√¥'))
                         ).length}
                       </div>
                      <div className="text-sm text-gray-600">{t('admin.vehicleRegistrations.pending.cars.title', '√î t√¥ ch·ªù duy·ªát')}</div>
                       <Button className="mt-4" variant="outline">
                        {t('admin.vehicleRegistrations.actions.viewDetails', 'Xem chi ti·∫øt')} ‚Üí
                       </Button>
                     </div>
                   </CardContent>
                 </Link>
               </Card>

               {/* Card Xe m√°y */}
               <Card className="hover:shadow-lg transition-shadow cursor-pointer">
                 <Link href="/admin-dashboard/vehicle-registrations/pending-motorcycles">
                   <CardHeader>
                     <CardTitle className="flex items-center gap-2 text-green-600">
                       <Bike className="h-6 w-6" />
                       {t('admin.vehicleRegistrations.pending.motorcycles.subtitle', 'Xe m√°y ch·ªù duy·ªát ({count})', {
                         count: filteredVehicles.filter(v =>
                           (v.vehicleType?.toLowerCase().includes('motorcycle') ||
                            v.vehicleTypeDisplayName?.toLowerCase().includes('xe m√°y') ||
                            v.vehicleType?.toLowerCase().includes('xe ƒë·∫°p') ||
                            v.vehicleTypeDisplayName?.toLowerCase().includes('xe ƒë·∫°p'))
                         ).length
                       })}
                     </CardTitle>
                     <CardDescription>
                       {t('admin.vehicleRegistrations.pending.motorcycles.description', 'Danh s√°ch xe m√°y/xe ƒë·∫°p ƒëang ch·ªù ph√™ duy·ªát')}
                     </CardDescription>
                   </CardHeader>
                   <CardContent>
                     <div className="text-center py-8">
                       <div className="text-2xl font-bold text-green-600 mb-2">
                         {filteredVehicles.filter(v => 
                           (v.vehicleType?.toLowerCase().includes('motorcycle') || 
                            v.vehicleTypeDisplayName?.toLowerCase().includes('xe m√°y') ||
                            v.vehicleType?.toLowerCase().includes('xe ƒë·∫°p') || 
                            v.vehicleTypeDisplayName?.toLowerCase().includes('xe ƒë·∫°p'))
                         ).length}
                       </div>
                      <div className="text-sm text-gray-600">{t('admin.vehicleRegistrations.pending.motorcycles.title', 'Xe m√°y ch·ªù duy·ªát')}</div>
                       <Button className="mt-4" variant="outline">
                        {t('admin.vehicleRegistrations.actions.viewDetails', 'Xem chi ti·∫øt')} ‚Üí
                       </Button>
                     </div>
                   </CardContent>
                 </Link>
               </Card>
             </div>
             
             <CapacityWarningCard
               vehicles={vehicles}
               canApproveVehicle={canApproveVehicle}
             />
           </TabsContent>

          <TabsContent value="all" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>{t('admin.vehicleRegistrations.tabs.all', 'T·∫•t c·∫£ xe ({count})', { count: totalCount })}</CardTitle>
              </CardHeader>
              <CardContent>
                {allVehiclesLoading ? (
                  <div className="text-center py-8 text-gray-500">{t('admin.vehicleRegistrations.loading', 'ƒêang t·∫£i...')}</div>
                ) : filteredAllVehicles.length === 0 ? (
                  <div className="text-center py-8 text-gray-500">{t('admin.vehicleRegistrations.noData', 'Kh√¥ng c√≥ d·ªØ li·ªáu')}</div>
                ) : (
                  <Table>
                     <TableHeader>
                       <TableRow>
                         <TableHead>{t('admin.vehicleRegistrations.table.owner', 'Ch·ªß xe')}</TableHead>
                         <TableHead>{t('admin.vehicleRegistrations.table.type', 'Lo·∫°i xe')}</TableHead>
                         <TableHead>{t('admin.vehicleRegistrations.table.licensePlate', 'Bi·ªÉn s·ªë')}</TableHead>
                         <TableHead>{t('admin.vehicleRegistrations.table.color', 'M√†u s·∫Øc')}</TableHead>
                         <TableHead>{t('admin.vehicleRegistrations.table.apartment', 'CƒÉn h·ªô')}</TableHead>
                         <TableHead>{t('admin.vehicleRegistrations.table.registrationDate', 'Th·ªùi gian ƒëƒÉng k√Ω')}</TableHead>
                         <TableHead>{t('admin.vehicleRegistrations.table.status', 'Tr·∫°ng th√°i')}</TableHead>
                         <TableHead>{t('admin.vehicleRegistrations.table.actions', 'H√†nh ƒë·ªông')}</TableHead>
                       </TableRow>
                     </TableHeader>
                    <TableBody>
                      {filteredAllVehicles
                        .filter(v => v.status === 'APPROVED')
                        .map((vehicle) => (
                        <TableRow key={vehicle.id}>
                          <TableCell className="font-medium">{vehicle.userFullName || '-'}</TableCell>
                          <TableCell>
                            <div className="flex items-center gap-2">
                              {getVehicleTypeIcon(vehicle.vehicleType)}
                              {vehicle.vehicleTypeDisplayName || vehicle.vehicleType}
                            </div>
                          </TableCell>
                          <TableCell>{vehicle.licensePlate}</TableCell>
                          <TableCell>{vehicle.color || '-'}</TableCell>
                                                     <TableCell>{vehicle.apartmentUnitNumber || '-'}</TableCell>
                           <TableCell>
                             <div className="text-sm">
                               <div className="font-medium">
                                 {vehicle.createdAt ? new Date(vehicle.createdAt).toLocaleDateString('vi-VN') : '-'}
                               </div>
                               <div className="text-xs text-gray-500">
                                 {vehicle.createdAt ? new Date(vehicle.createdAt).toLocaleTimeString('vi-VN', {
                                   hour: '2-digit',
                                   minute: '2-digit'
                                 }) : '-'}
                               </div>
                               {vehicle.updatedAt && vehicle.updatedAt !== vehicle.createdAt && (
                                 <div className="text-xs text-blue-600 mt-1">
                                   C·∫≠p nh·∫≠t: {new Date(vehicle.updatedAt).toLocaleDateString('vi-VN')} {new Date(vehicle.updatedAt).toLocaleTimeString('vi-VN', {
                                     hour: '2-digit',
                                     minute: '2-digit'
                                   })}
                                 </div>
                               )}
                             </div>
                           </TableCell>
                           <TableCell>{getStatusBadge(vehicle.status, vehicle.statusDisplayName)}</TableCell>
                           <TableCell>
                            <div className="flex gap-2">
                              {vehicle.status !== 'REJECTED' ? (
                                <Button
                                  size="sm"
                                  variant="destructive"
                                  onClick={() => {
                                    setCancelId(vehicle.id);
                                    setShowCancelModal(true);
                                  }}
                                >
                                  {t('admin.vehicleRegistrations.actions.cancel', 'H·ªßy ƒëƒÉng k√Ω')}
                                </Button>
                              ) : (
                                <Button
                                  size="sm"
                                  variant="outline"
                                  onClick={() => handleRestore(vehicle.id)}
                                  disabled={!canApproveVehicle(vehicle)}
                                  title={canApproveVehicle(vehicle) ? 'Kh√¥i ph·ª•c' : 'Kh√¥ng th·ªÉ kh√¥i ph·ª•c - B√£i xe ƒë√£ ƒë·∫ßy ho·∫∑c c·∫•u h√¨nh kh√¥ng ho·∫°t ƒë·ªông'}
                                >
                                  {t('admin.vehicleRegistrations.actions.restore', 'Kh√¥i ph·ª•c')}
                                </Button>
                              )}
                            </div>
                          </TableCell>
                        </TableRow>
                      ))}
                    </TableBody>
                  </Table>
                )}
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="approved" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>{t('admin.vehicleRegistrations.tabs.approved', 'ƒê√£ duy·ªát ({count})', { count: approvedCount })}</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>{t('admin.vehicleRegistrations.table.owner', 'Ch·ªß xe')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.type', 'Lo·∫°i xe')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.licensePlate', 'Bi·ªÉn s·ªë')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.color', 'M√†u s·∫Øc')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.apartment', 'CƒÉn h·ªô')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.registrationDate', 'Th·ªùi gian ƒëƒÉng k√Ω')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.status', 'Tr·∫°ng th√°i')}</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {allVehicles
                      .filter(v => v.status === 'APPROVED')
                      .map((vehicle) => (
                      <TableRow key={vehicle.id}>
                        <TableCell className="font-medium">{vehicle.userFullName || '-'}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            {getVehicleTypeIcon(vehicle.vehicleType)}
                            {vehicle.vehicleTypeDisplayName || vehicle.vehicleType}
                          </div>
                        </TableCell>
                        <TableCell>{vehicle.licensePlate}</TableCell>
                        <TableCell>{vehicle.color || '-'}</TableCell>
                        <TableCell>{vehicle.apartmentUnitNumber || '-'}</TableCell>
                        <TableCell>
                          <div className="text-sm">
                            <div className="font-medium">
                              {vehicle.createdAt ? new Date(vehicle.createdAt).toLocaleDateString('vi-VN') : '-'}
                            </div>
                            <div className="text-xs text-gray-500">
                              {vehicle.createdAt ? new Date(vehicle.createdAt).toLocaleTimeString('vi-VN', {
                                hour: '2-digit',
                                minute: '2-digit'
                              }) : '-'}
                            </div>
                            {vehicle.updatedAt && vehicle.updatedAt !== vehicle.createdAt && (
                              <div className="text-xs text-blue-600 mt-1">
                                C·∫≠p nh·∫≠t: {new Date(vehicle.updatedAt).toLocaleDateString('vi-VN')} {new Date(vehicle.updatedAt).toLocaleTimeString('vi-VN', {
                                  hour: '2-digit',
                                  minute: '2-digit'
                                })}
                              </div>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>{getStatusBadge(vehicle.status, vehicle.statusDisplayName)}</TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="rejected" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle>{t('admin.vehicleRegistrations.tabs.rejected', 'T·ª´ ch·ªëi ({count})', { count: rejectedCount })}</CardTitle>
              </CardHeader>
              <CardContent>
                <Table>
                  <TableHeader>
                    <TableRow>
                      <TableHead>{t('admin.vehicleRegistrations.table.owner', 'Ch·ªß xe')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.type', 'Lo·∫°i xe')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.licensePlate', 'Bi·ªÉn s·ªë')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.color', 'M√†u s·∫Øc')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.apartment', 'CƒÉn h·ªô')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.registrationDate', 'Th·ªùi gian ƒëƒÉng k√Ω')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.status', 'Tr·∫°ng th√°i')}</TableHead>
                      <TableHead>{t('admin.vehicleRegistrations.table.actions', 'H√†nh ƒë·ªông')}</TableHead>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {allVehicles
                      .filter(v => v.status === 'REJECTED')
                      .map((vehicle) => (
                      <TableRow key={vehicle.id}>
                        <TableCell className="font-medium">{vehicle.userFullName || '-'}</TableCell>
                        <TableCell>
                          <div className="flex items-center gap-2">
                            {getVehicleTypeIcon(vehicle.vehicleType)}
                            {vehicle.vehicleTypeDisplayName || vehicle.vehicleType}
                          </div>
                        </TableCell>
                        <TableCell>{vehicle.licensePlate}</TableCell>
                        <TableCell>{vehicle.color || '-'}</TableCell>
                        <TableCell>{vehicle.apartmentUnitNumber || '-'}</TableCell>
                        <TableCell>
                          <div className="text-sm">
                            <div className="font-medium">
                              {vehicle.createdAt ? new Date(vehicle.createdAt).toLocaleDateString('vi-VN') : '-'}
                            </div>
                            <div className="text-xs text-gray-500">
                              {vehicle.createdAt ? new Date(vehicle.createdAt).toLocaleTimeString('vi-VN', {
                                hour: '2-digit',
                                minute: '2-digit'
                              }) : '-'}
                            </div>
                            {vehicle.updatedAt && vehicle.updatedAt !== vehicle.createdAt && (
                              <div className="text-xs text-blue-600 mt-1">
                                C·∫≠p nh·∫≠t: {new Date(vehicle.updatedAt).toLocaleDateString('vi-VN')} {new Date(vehicle.updatedAt).toLocaleTimeString('vi-VN', {
                                  hour: '2-digit',
                                  minute: '2-digit'
                                })}
                              </div>
                            )}
                          </div>
                        </TableCell>
                        <TableCell>{getStatusBadge(vehicle.status, vehicle.statusDisplayName)}</TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            <Button 
                              size="sm" 
                              onClick={() => handleRestore(vehicle.id)}
                              disabled={!canApproveVehicle(vehicle)}
                              title={canApproveVehicle(vehicle) ? 'Kh√¥i ph·ª•c' : 'Kh√¥ng th·ªÉ kh√¥i ph·ª•c - B√£i xe ƒë√£ ƒë·∫ßy ho·∫∑c kh√¥ng c√≥ c·∫•u h√¨nh ho·∫°t ƒë·ªông'}
                            >
                              {t('admin.vehicleRegistrations.actions.restore', 'Kh√¥i ph·ª•c')}
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    ))}
                  </TableBody>
                </Table>
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="capacity-overview" className="space-y-4">
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <Settings className="h-5 w-5" />
                  {t('admin.vehicleRegistrations.capacity.overview.title.full', 'T·ªïng quan gi·ªõi h·∫°n xe')}
                </CardTitle>
                <CardDescription>
                  {t('admin.vehicleRegistrations.capacity.overview.description', 'Xem t√¨nh tr·∫°ng s·ª©c ch·ª©a xe c·ªßa t·∫•t c·∫£ t√≤a nh√†')}
                </CardDescription>
              </CardHeader>
              <CardContent>
                <VehicleCapacityOverview />
              </CardContent>
            </Card>
          </TabsContent>

          <TabsContent value="capacity-config" className="space-y-4">
            <VehicleCapacityManager />
          </TabsContent>
        </Tabs>

        {/* Reject Modal */}
        {showRejectModal && (
          <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-lg w-full max-w-md p-4">
              <h3 className="text-lg font-semibold mb-2">{t('admin.vehicleRegistrations.rejectModal.title', 'Ch·ªçn l√Ω do t·ª´ ch·ªëi')}</h3>
              <div className="space-y-2 mb-2">
                <div className="text-sm text-gray-600">{t('admin.vehicleRegistrations.rejectModal.quickReasons', 'L√Ω do nhanh:')}</div>
                <div className="flex flex-wrap gap-2">
                  {['Kh√°ch H√†ng Y√™u C·∫ßu', 'Ch·∫≠m thanh to√°n'].map((preset) => (
                    <button
                      key={preset}
                      type="button"
                      className="px-2 py-1 text-xs rounded border hover:bg-gray-50"
                      onClick={() => setRejectionReason(prev => prev ? `${prev}\n${preset}` : preset)}
                    >
                      {preset}
                    </button>
                  ))}
                </div>
              </div>
              <textarea
                className="w-full border rounded p-2 h-28"
                value={rejectionReason}
                onChange={(e) => setRejectionReason(e.target.value)}
                placeholder="L√Ω do t·ª´ ch·ªëi..."
              />
              <div className="mt-3 flex justify-end gap-2">
                <Button variant="outline" onClick={() => setShowRejectModal(false)}>{t('admin.vehicleRegistrations.rejectModal.cancel', 'H·ªßy')}</Button>
                <Button
                  className="bg-red-600 text-white"
                  onClick={handleReject}
                >
                  {t('admin.vehicleRegistrations.rejectModal.confirm', 'X√°c nh·∫≠n t·ª´ ch·ªëi')}
                </Button>
              </div>
            </div>
          </div>
        )}

        {/* Cancel vehicle modal */}
        {showCancelModal && (
          <div className="fixed inset-0 bg-black/40 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg shadow-lg w-full max-w-md p-4">
              <h3 className="text-lg font-semibold mb-2">{t('admin.vehicleRegistrations.cancelModal.title', 'X√°c nh·∫≠n h·ªßy ƒëƒÉng k√Ω xe')}</h3>
              <p className="text-gray-600 mb-2">{t('admin.vehicleRegistrations.cancelModal.description', 'B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën h·ªßy ƒëƒÉng k√Ω xe n√†y kh√¥ng?')}</p>
              <div className="space-y-2 mb-2">
                <div className="text-sm text-gray-600">{t('admin.vehicleRegistrations.cancelModal.quickReasons', 'Ch·ªçn l√Ω do nhanh:')}</div>
                <div className="flex flex-wrap gap-2">
                  {['Kh√°ch H√†ng Y√™u C·∫ßu', 'Ch·∫≠m thanh to√°n'].map((preset) => (
                    <button
                      key={preset}
                      type="button"
                      className="px-2 py-1 text-xs rounded border hover:bg-gray-50"
                      onClick={() => {
                        setCancelReason(prev => prev ? `${prev}\n${preset}` : preset);
                        setCancelError('');
                      }}
                    >
                      {preset}
                    </button>
                  ))}
                </div>
              </div>
              <textarea
                className={`w-full border rounded p-2 h-28 ${cancelError ? 'border-red-500' : ''}`}
                value={cancelReason}
                onChange={(e) => { setCancelReason(e.target.value); setCancelError(''); }}
                placeholder={t('admin.vehicleRegistrations.cancelModal.placeholder', 'Nh·∫≠p l√Ω do h·ªßy ƒëƒÉng k√Ω...')}
              />
              {cancelError && <div className="text-sm text-red-600 mt-1">{cancelError}</div>}
              <div className="flex justify-end gap-2 mt-4">
                <Button variant="outline" onClick={() => setShowCancelModal(false)}>{t('admin.vehicleRegistrations.cancelModal.cancel', 'H·ªßy')}</Button>
                <Button
                  variant="destructive"
                  onClick={handleCancel}
                  disabled={cancelling}
                >
                  {cancelling ? t('admin.vehicleRegistrations.cancelModal.processing', 'ƒêang x·ª≠ l√Ω...') : t('admin.vehicleRegistrations.cancelModal.confirm', 'X√°c nh·∫≠n h·ªßy')}
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
    </AdminLayout>
  );
}
