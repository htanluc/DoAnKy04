package com.mytech.apartment.portal.services;

import java.util.List;
import java.util.Optional;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.mytech.apartment.portal.dtos.ManualPaymentRequest;
import com.mytech.apartment.portal.dtos.PaymentDto;
import com.mytech.apartment.portal.dtos.PaymentMethodDto;
import com.mytech.apartment.portal.mappers.PaymentMapper;
import com.mytech.apartment.portal.mappers.PaymentMethodMapper;
import com.mytech.apartment.portal.models.Invoice;
import com.mytech.apartment.portal.models.Payment;
import com.mytech.apartment.portal.repositories.InvoiceRepository;
import com.mytech.apartment.portal.repositories.PaymentMethodRepository;
import com.mytech.apartment.portal.repositories.PaymentRepository;

import jakarta.transaction.Transactional;

@Service
public class PaymentService {
    @Autowired
    private PaymentRepository paymentRepository;

    @Autowired
    private InvoiceRepository invoiceRepository;

    @Autowired
    private PaymentMapper paymentMapper;

    @Autowired
    private PaymentMethodRepository paymentMethodRepository;

    @Autowired
    private PaymentMethodMapper paymentMethodMapper;

    public List<PaymentDto> getAllPayments() {
        return paymentRepository.findAll().stream()
                .map(paymentMapper::toDto)
                .collect(Collectors.toList());
    }

    public Optional<PaymentDto> getPaymentById(Long id) {
        return paymentRepository.findById(id).map(paymentMapper::toDto);
    }

    public void deletePayment(Long id) {
        if (!paymentRepository.existsById(id)) {
            throw new RuntimeException("Payment not found with id " + id);
        }
        paymentRepository.deleteById(id);
    }

    @Transactional
    public PaymentDto recordManualPayment(ManualPaymentRequest request) {
        Invoice invoice = invoiceRepository.findById(request.getInvoiceId())
                .orElseThrow(() -> new RuntimeException("Invoice not found with id " + request.getInvoiceId()));

        Payment payment = new Payment();
        payment.setInvoice(invoice);
        payment.setPaidByUserId(request.getPaidByUserId());
        payment.setAmount(request.getAmount());
        payment.setMethod(request.getMethod());
        payment.setReferenceCode(request.getReferenceCode());
        payment.setStatus("SUCCESS"); // Manual payments are considered successful

        Payment savedPayment = paymentRepository.save(payment);

        // Update invoice status if fully paid
        double totalPaid = invoice.getPayments().stream().mapToDouble(Payment::getAmount).sum() + savedPayment.getAmount();
        if (totalPaid >= invoice.getTotalAmount()) {
            invoice.setStatus("PAID");
            invoiceRepository.save(invoice);
        }

        return paymentMapper.toDto(savedPayment);
    }

    public List<PaymentMethodDto> getPaymentMethods() {
        return paymentMethodRepository.findAll().stream()
            .map(paymentMethodMapper::toDto)
            .collect(Collectors.toList());
    }

    public List<PaymentDto> getPaymentsByInvoice(Long invoiceId) {
        return paymentRepository.findByInvoiceId(invoiceId).stream()
            .map(paymentMapper::toDto)
            .collect(Collectors.toList());
    }

    public List<PaymentDto> getPaymentsByStatus(String status) {
        return paymentRepository.findByStatus(status).stream()
            .map(paymentMapper::toDto)
            .collect(Collectors.toList());
    }
}