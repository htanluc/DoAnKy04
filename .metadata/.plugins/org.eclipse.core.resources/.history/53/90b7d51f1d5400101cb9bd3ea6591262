package com.mytech.apartment.portal.apis;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.web.bind.annotation.*;

import com.mytech.apartment.portal.dtos.ApiResponse;
import com.mytech.apartment.portal.dtos.ChangePasswordRequest;
import com.mytech.apartment.portal.dtos.ForgotPasswordRequest;
import com.mytech.apartment.portal.dtos.JwtResponse;
import com.mytech.apartment.portal.dtos.LoginRequest;
import com.mytech.apartment.portal.dtos.RegisterRequest;
import com.mytech.apartment.portal.dtos.ResetPasswordRequest;
import com.mytech.apartment.portal.dtos.UserDto;
import com.mytech.apartment.portal.models.RefreshToken;
import com.mytech.apartment.portal.models.User;
import com.mytech.apartment.portal.repositories.UserRepository;
import com.mytech.apartment.portal.security.UserDetailsImpl;
import com.mytech.apartment.portal.security.jwt.JwtProvider;
import com.mytech.apartment.portal.services.AuthService;
import com.mytech.apartment.portal.services.RefreshTokenService;
import com.mytech.apartment.portal.services.ResidentService;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/api/auth")
@Tag(name = "Authentication", description = "Endpoints for user authentication & registration")
public class AuthController {

    private final AuthenticationManager authManager;
    private final JwtProvider jwtProvider;
    private final UserRepository userRepo;
    private final AuthService authService;
    private final PasswordEncoder passwordEncoder;
    private final RefreshTokenService refreshTokenService;
    private final ResidentService residentService;

    public AuthController(AuthenticationManager am, JwtProvider jp, UserRepository ur, AuthService as, PasswordEncoder pe, RefreshTokenService refreshTokenService, ResidentService residentService) {
        this.authManager = am;
        this.jwtProvider = jp;
        this.userRepo = ur;
        this.authService = as;
        this.passwordEncoder = pe;
        this.refreshTokenService = refreshTokenService;
        this.residentService = residentService;
    }

    @Operation(summary = "Validate token", description = "Validate JWT token and return user info")
    @GetMapping("/validate")
    public ResponseEntity<ApiResponse<UserDto>> validateToken() {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            if (auth != null && auth.isAuthenticated() && !"anonymousUser".equals(auth.getName())) {
                UserDetailsImpl userDetails = (UserDetailsImpl) auth.getPrincipal();
                UserDto userDto = new UserDto();
                userDto.setId(userDetails.getId());
                userDto.setUsername(userDetails.getUsername());
                userDto.setPhoneNumber(userDetails.getUsername()); // username contains phoneNumber
                userDto.setStatus("ACTIVE"); // Default status
                userDto.setRoles(userDetails.getAuthorities().stream()
                    .map(GrantedAuthority::getAuthority)
                    .collect(Collectors.toSet()));
                return ResponseEntity.ok(ApiResponse.success("Token hợp lệ", userDto));
            } else {
                return ResponseEntity.status(401).body(ApiResponse.error("Token không hợp lệ hoặc đã hết hạn"));
            }
        } catch (Exception e) {
            return ResponseEntity.status(401).body(ApiResponse.error("Token không hợp lệ"));
        }
    }
    @Operation(summary = "User login", description = "Authenticate by phoneNumber and return a JWT token")
    @PostMapping("/login")
    public ResponseEntity<ApiResponse<?>> login(@Valid @RequestBody LoginRequest req) {
        Authentication auth = authManager.authenticate(
            new UsernamePasswordAuthenticationToken(req.getPhoneNumber(), req.getPassword()));
        SecurityContextHolder.getContext().setAuthentication(auth);

        UserDetailsImpl ud = (UserDetailsImpl) auth.getPrincipal();
        User user = userRepo.findByPhoneNumber(ud.getUsername()).orElse(null);

        if (user != null && !"ACTIVE".equalsIgnoreCase(user.getStatus())) {
            // Trả về success true, data gồm status, roles, email, phoneNumber, lockReason
            java.util.Map<String, Object> data = new java.util.HashMap<>();
            data.put("status", user.getStatus());
            data.put("email", user.getEmail());
            data.put("phoneNumber", user.getPhoneNumber());
            data.put("lockReason", user.getLockReason());
            if (user.getRoles() != null) {
                data.put("roles", user.getRoles().stream().map(r -> r.getName()).collect(java.util.stream.Collectors.toList()));
            } else {
                data.put("roles", new java.util.ArrayList<>());
            }
            // Thông báo phù hợp cho từng trạng thái
            String message;
            if ("LOCKED".equalsIgnoreCase(user.getStatus())) {
                message = "Tài khoản đã bị khóa." + (user.getLockReason() != null ? " Lý do: " + user.getLockReason() : "");
            } else if ("INACTIVE".equalsIgnoreCase(user.getStatus())) {
                message = "Tài khoản chưa kích hoạt. Vui lòng kiểm tra email để xác thực.";
            } else {
                message = "Tài khoản không hoạt động.";
            }
            return ResponseEntity.ok(ApiResponse.success(message, data));
        }

        // *** ĐÃ BỎ ĐOẠN KIỂM TRA requireResidentInfo ***
        // Resident login sẽ luôn vào được dashboard, không bị chặn bởi thiếu thông tin

        String token = jwtProvider.generateToken(auth);
        RefreshToken refreshToken = refreshTokenService.createRefreshToken(user);
        List<String> roles = ud.getAuthorities()
                               .stream()
                               .map(GrantedAuthority::getAuthority)
                               .map(r -> r.replace("ROLE_", ""))
                               .collect(Collectors.toList());
        return ResponseEntity.ok(
            ApiResponse.success("Đăng nhập thành công",
                new JwtResponse(
                    token,
                    "Bearer",
                    user != null ? user.getId() : null,
                    user != null ? user.getUsername() : null,
                    user != null ? user.getEmail() : null,
                    user != null ? user.getPhoneNumber() : null,
                    roles,
                    user != null ? user.getStatus() : null,
                    refreshToken.getToken()
                )
            )
        );
    }

    @Operation(summary = "User registration", description = "Register new user account")
    @PostMapping("/register")
    public ResponseEntity<ApiResponse<String>> register(@Valid @RequestBody RegisterRequest req) {
        try {
            authService.register(req);
            return ResponseEntity.ok(ApiResponse.success("Đăng ký thành công! Vui lòng kiểm tra email để kích hoạt tài khoản."));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(ApiResponse.error(e.getMessage()));
        }
    }

    @Operation(summary = "Verify email", description = "Verify email for account activation")
    @GetMapping("/verify-email")
    public ResponseEntity<ApiResponse<String>> verifyEmail(@RequestParam("token") String token) {
        try {
            authService.verifyEmailToken(token);
            return ResponseEntity.ok(ApiResponse.success("Kích hoạt tài khoản thành công!"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(ApiResponse.error(e.getMessage()));
        }
    }

    @Operation(summary = "Change password", description = "Change user password (requires authentication)")
    @PostMapping("/change-password")
    public ResponseEntity<ApiResponse<String>> changePassword(@Valid @RequestBody ChangePasswordRequest req) {
        try {
            authService.changePassword(req);
            return ResponseEntity.ok(ApiResponse.success("Đổi mật khẩu thành công!"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(ApiResponse.error(e.getMessage()));
        }
    }

    @Operation(summary = "Forgot password", description = "Request password reset")
    @PostMapping("/forgot-password")
    public ResponseEntity<ApiResponse<String>> forgotPassword(@Valid @RequestBody ForgotPasswordRequest req) {
        try {
            authService.forgotPassword(req.getEmailOrPhone());
            return ResponseEntity.ok(ApiResponse.success("Đã gửi hướng dẫn khôi phục mật khẩu!"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(ApiResponse.error(e.getMessage()));
        }
    }

    @Operation(summary = "Reset password", description = "Reset password using token")
    @PostMapping("/reset-password")
    public ResponseEntity<ApiResponse<String>> resetPassword(@Valid @RequestBody ResetPasswordRequest req) {
        try {
            authService.resetPassword(req);
            return ResponseEntity.ok(ApiResponse.success("Đặt lại mật khẩu thành công!"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(ApiResponse.error(e.getMessage()));
        }
    }

    @Operation(summary = "Test endpoint", description = "Simple test endpoint")
    @GetMapping("/test")
    public ResponseEntity<String> test() {
        return ResponseEntity.ok("Auth controller is working!");
    }

    @Operation(summary = "Reset admin password", description = "Reset admin user password to admin123")
    @PostMapping("/reset-admin")
    public ResponseEntity<ApiResponse<String>> resetAdminPassword() {
        try {
            // Tìm user admin
            User adminUser = userRepo.findByUsername("admin")
                    .orElseThrow(() -> new RuntimeException("Admin user not found"));

            // Encode password mới
            String newPassword = "admin123";
            String encodedPassword = passwordEncoder.encode(newPassword);

            // Cập nhật password
            adminUser.setPasswordHash(encodedPassword);
            userRepo.save(adminUser);

            return ResponseEntity.ok(ApiResponse.success("Admin password reset successfully", "New password: " + newPassword));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(ApiResponse.error("Failed to reset admin password: " + e.getMessage()));
        }
    }

    @Operation(summary = "Resend verification email", description = "Resend email verification link for account activation")
    @PostMapping("/resend-verification")
    public ResponseEntity<ApiResponse<String>> resendVerification(@Valid @RequestBody ForgotPasswordRequest req) {
        try {
            authService.resendVerificationEmail(req.getEmailOrPhone());
            return ResponseEntity.ok(ApiResponse.success("Đã gửi lại email xác thực!"));
        } catch (Exception e) {
            return ResponseEntity.badRequest().body(ApiResponse.error(e.getMessage()));
        }
    }

    @PostMapping("/refresh-token")
    public ResponseEntity<ApiResponse<?>> refreshToken(@RequestBody java.util.Map<String, String> req) {
        String requestRefreshToken = req.get("refreshToken");
        java.util.Optional<RefreshToken> tokenOpt = refreshTokenService.findByToken(requestRefreshToken);

        if (tokenOpt.isPresent()) {
            RefreshToken token = tokenOpt.get();
            if (refreshTokenService.isExpired(token)) {
                refreshTokenService.deleteByUser(token.getUser());
                return ResponseEntity.status(403).body(ApiResponse.error("Refresh token đã hết hạn. Vui lòng đăng nhập lại."));
            }
            String newAccessToken = jwtProvider.generateTokenFromUsername(token.getUser().getPhoneNumber());
            return ResponseEntity.ok(ApiResponse.success("Cấp mới access token thành công", java.util.Map.of(
                "token", newAccessToken,
                "refreshToken", token.getToken()
            )));
        } else {
            return ResponseEntity.status(403).body(ApiResponse.error("Refresh token không hợp lệ."));
        }
    }
}