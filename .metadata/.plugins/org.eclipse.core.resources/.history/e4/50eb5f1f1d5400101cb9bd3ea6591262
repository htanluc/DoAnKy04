package com.mytech.apartment.portal.apis;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.mytech.apartment.portal.dtos.FeedbackCreateRequest;
import com.mytech.apartment.portal.dtos.FeedbackDto;
import com.mytech.apartment.portal.dtos.FeedbackUpdateRequest;
import com.mytech.apartment.portal.services.FeedbackService;

@RestController
@RequestMapping("/api")
public class FeedbackController {
    @Autowired
    private FeedbackService feedbackService;

    /**
     * Get all feedbacks
     * Lấy danh sách tất cả phản hồi
     */
    @GetMapping("/admin/feedbacks")
    public List<FeedbackDto> getAllFeedbacks() {
        return feedbackService.getAllFeedbacks();
    }

    /**
     * Get feedback by ID
     * Lấy phản hồi theo ID
     */
    @GetMapping("/admin/feedbacks/{id}")
    public ResponseEntity<FeedbackDto> getFeedbackById(@PathVariable Long id) {
        Optional<FeedbackDto> feedback = feedbackService.getFeedbackById(id);
        return feedback.map(ResponseEntity::ok)
                .orElse(ResponseEntity.notFound().build());
    }

    /**
     * Create new feedback
     * Tạo mới phản hồi
     */
    @PostMapping("/feedbacks")
    public ResponseEntity<FeedbackDto> createFeedback(@RequestBody FeedbackCreateRequest request) {
        try {
            FeedbackDto feedback = feedbackService.createFeedback(request);
            return ResponseEntity.ok(feedback);
        } catch (RuntimeException e) {
            return ResponseEntity.badRequest().body(null);
        }
    }

    /**
     * Update feedback by ID
     * Cập nhật phản hồi theo ID
     */
    @PutMapping("/admin/feedbacks/{id}")
    public ResponseEntity<FeedbackDto> updateFeedback(@PathVariable Long id, @RequestBody FeedbackUpdateRequest request) {
        try {
            FeedbackDto updatedFeedback = feedbackService.updateFeedback(id, request);
            return ResponseEntity.ok(updatedFeedback);
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }

    /**
     * Delete feedback by ID
     * Xóa phản hồi theo ID
     */
    @DeleteMapping("/admin/feedbacks/{id}")
    public ResponseEntity<Void> deleteFeedback(@PathVariable Long id) {
        try {
            feedbackService.deleteFeedback(id);
            return ResponseEntity.noContent().build();
        } catch (RuntimeException e) {
            return ResponseEntity.notFound().build();
        }
    }
}