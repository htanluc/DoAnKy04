FPT ACADEMY INTERNATIONAL FPT â€“ APTECH COMPUTER EDUCATION Centre Name: ACE-HCMC-2-FPT. Address:  21Bis Hau Giang ,  Tan Son Nhat , Ho Chi Minh City, Viet Nam. SMART BUILDING MANAGEMENT SYSTEM Design Document Supervisor: Mr.  TRUONG THANH TRUNG Semester: 1 Batch No: T 3.2308.A 0 Group No: 1 Team member: Full name Roll No. 1. Huá»³nh  Táº¥n  Lá»±c Student1507630 2 . Äáº·ng TrÃ­ Thá»©c Student1438991 Month :  September   Year : 2025 Table of Contents REVIEW 1: Problem Definition & Requirement 4 1. INTRODUCTION 4 1.1 Background and significance of the topic 4 1.2 Main and secondary objectives 5 1.3 Project scope 6 1.4 System users 7 2. PROBLEM IDENTIFICATION 7 2.1 Current situation and difficulties 7 2.2 Problems to be addressed 9 2.3 Proposed solutions 10 3. SYSTEM REQUIREMENTS 11 3.1 Non-functional requirements 11 3.2 Functional requirements 12 3.3 Hardware/software requirements 14 4.TASK SHEET FOR REVIEW 1. 16 REVIEW 2 Architecture & Design 17 1. SYSTEM ARCHITECTURE 18 1.1 3-tier architecture (Presentation, Business Logic, Data Access) 18 1.2 Detailed roles of each tier + technologies used 18 1.3 Overall system architecture 21 1.4 Microservices architecture diagram 21 1.5 Microservices details 22 1.6 Data flows in the architecture 26 2. DATA FLOW DIAGRAM (DFD) 30 2.2 Overall data flow diagram 39 3. USE CASE DIAGRAM 39 3.2 Staff Use Cases (Maintenance handling, facility management) 47 3.3 Resident Use Cases (Booking, payment, receiving notifications) 51 TASK SHEET FOR REVIEW 2. 59 REVIEW 3 DATABASE & GUI DESIGN SMART BUILDING MANAGEMENT SYSTEM 61 1. DATABASE DESIGN 62 1.1 List of main entities 62 1.2 ERD (Entity-Relationship Diagram) 64 1.3 Detailed tables (attributes, primary keys, foreign keys) 64 1.4 Relationships between tables 65 2. USER INTERFACE (UI/UX) DESIGN 66 2.1 Website interface 66 2.2 Mobile App interface 68 2.3 UI/UX principles 70 Have successfully Designed & Developed SMART BUILDING MANAGEMENT SYSTEM Approved by:  Mr. TRUONG  THANH TRUNG Date of Issue: 0 9 /2025 REVIEW 1: Problem Definition & Requirement 1. INTRODUCTION 1.1 Background and significance of the topic In the current context of rapid urbanization, managing apartment buildings has become extremely complex and challenging. Traditional management systems based on paperwork and manual processes no longer meet the increasing needs for management efficiency, resident services, and operational optimization. The current situation shows: â€¢ Rapid increase in the number of apartment buildings and units â€¢ Manual management processes causing delays and errors â€¢ Difficult communication between management board and residents â€¢ Lack of effective monitoring and reporting systems â€¢ Increasingly diverse needs for amenities and services Significance of the topic: â€¢ Solve real-world problems in apartment management â€¢ Apply modern technology to automate processes â€¢ Improve service quality and resident experience â€¢ Create an intelligent, sustainable management platform â€¢ Contribute to smart city development 1.2 Main and secondary objectives Main objectives: â€¢ Develop a comprehensive and integrated building management platform â€¢ Automate administrative processes and minimize manual work â€¢ Improve communication and information between management and residents â€¢ Optimize facility booking and maintenance management â€¢ Simplify billing, payment processes, and financial management â€¢ Provide mobile access to building services â€¢ Create an integrated, friendly, and easy-to-use interface Secondary objectives: â€¢ Implement real-time notification and update systems â€¢ Provide comprehensive reports and analytics on building operations â€¢ Ensure high scalability and security of the system â€¢ Create a responsive and accessible user interface â€¢ Implement multi-language support (Vietnamese/English) â€¢ Provide comprehensive documentation and user guides â€¢ Integrate with external systems when needed 1.3 Project scope The project scope includes the following main areas: Core management functions: â€¢ User and role management (Admin, Staff, Resident) â€¢ Apartment and unit management in the building â€¢ Facility booking and management system â€¢ Maintenance request and incident handling â€¢ Invoice and payment management â€¢ Internal notification and communication system Technical features: â€¢ Web-based administrative dashboard â€¢ Mobile application for residents â€¢ Integrated RESTful API architecture â€¢ Real-time notification system â€¢ Detailed role and permission management â€¢ Data backup and security 1.4 System users Primary users: â€¢ Apartment building management board (Admin) â€¢ Operations and maintenance staff (Staff) â€¢ Residents living in the building (Resident) â€¢ Apartment owners User characteristics: â€¢ Admin: Has management knowledge, basic computer skills â€¢ Staff: Operations staff, needs a simple interface â€¢ Resident: Diverse in age, varying technology skills â€¢ Owners: Concerned about financial information and reports 2. PROBLEM IDENTIFICATION 2.1 Current situation and difficulties Current building management systems face many important challenges: Management processes: â€¢ Manual, time-consuming administrative processes â€¢ Complex paperwork, prone to loss and errors â€¢ Lack of effective monitoring and reporting systems â€¢ Difficulties in storing and retrieving information Communication and information: â€¢ Lack of real-time communication between management and residents â€¢ Delayed, unsynchronized notifications â€¢ Difficulty collecting feedback from residents â€¢ Lack of official and effective communication channels Facility and service management: â€¢ Manual, inefficient facility booking systems â€¢ Difficulties in scheduling and maintenance management â€¢ Lack of usage tracking and reporting â€¢ Slow maintenance request processing Finance and billing: â€¢ Complex, manual billing and payment processes â€¢ Difficulties tracking payments and outstanding debts â€¢ Lack of automatic warning and reminder systems â€¢ Financial reports not accurate and timely Access and usage: â€¢ Limited access to building information and services â€¢ Lack of mobile access for modern users â€¢ Unfriendly, hard-to-use interfaces â€¢ Poor integration across management functions 2.2 Problems to be addressed Based on the analysis, the main issues to solve include: Process issues: â€¢ Automate manual management processes â€¢ Standardize request handling and reporting procedures â€¢ Optimize workflows and task assignment Communication issues: â€¢ Improve communication and notification systems â€¢ Create effective two-way communication channels â€¢ Ensure information is delivered timely and accurately Facility management issues: â€¢ Optimize facility booking processes â€¢ Improve maintenance and incident management â€¢ Increase resource utilization efficiency Financial issues: â€¢ Simplify payment and invoice management â€¢ Automate calculation and invoice generation â€¢ Improve financial tracking and reporting Access issues: â€¢ Enhance access to information â€¢ Develop a mobile application for residents â€¢ Integrate management functions into a single platform 2.3 Proposed solutions The proposed Smart Building Management System includes: System architecture: â€¢ Comprehensive web management platform for admin and staff â€¢ Mobile application for residents â€¢ Integrated RESTful APIs to connect components â€¢ 3-tier architecture: Presentation, Business Logic, Data Access Technology solutions: â€¢ Backend: Spring Boot with Java 17 â€¢ Frontend: React.js with TypeScript â€¢ Mobile: Flutter cross-platform â€¢ Database:  MySQL â€¢ Authentication: JWT with Spring Security Key features: â€¢ User management and role-based access control â€¢ Integrated apartment and resident management â€¢ Smart facility booking system â€¢ Maintenance and incident management â€¢ Automated billing and payment system â€¢ Real-time notification and communication 3.   SYSTEM REQUIREMENTS 3.1 Non-functional requirements Performance: â€¢ System response time < 2 seconds for 95% of requests â€¢ Support 1000+ concurrent users â€¢ 99.9% system availability â€¢ Optimized database queries for large datasets â€¢ Application startup time < 5 seconds Security: â€¢ Encrypted data transmission (HTTPS/TLS) â€¢ Secure user authentication (JWT tokens) â€¢ Role-based access control (RBAC) â€¢ Encryption of sensitive data â€¢ Regular security checks and penetration tests â€¢ Protection against SQL injection and XSS Scalability: â€¢ Horizontal scalability â€¢ Load balancing support â€¢ Database sharding strategies â€¢ Microservices architecture support â€¢ Performance optimization for high load User experience (UX/UI): â€¢ Intuitive, easy-to-use user interface design â€¢ Responsive design for all device types â€¢ Accessibility compliance (WCAG 2.1) â€¢ Multi-language support (Vietnamese/English) â€¢ Consistent, easy-to-learn interface â€¢ Fast response for user interactions Reliability: â€¢ 24/7 stable system operation â€¢ High fault recovery capability â€¢ Automatic, frequent data backups â€¢ Detailed logging for debugging and monitoring 3.2 Functional requirements User and role management: â€¢ User registration and authentication with email verification â€¢ Role-based access control (Admin, Staff, Resident) â€¢ Manage and update user profiles â€¢ Password reset and account recovery â€¢ Session management and security Apartment and resident management: â€¢ Register apartments and manage detailed information â€¢ Assign residents and link them to apartments â€¢ Track apartment status (vacant, occupied, maintenance) â€¢ Maintenance history and related documents â€¢ Manage contact and emergency information Facility and service management: â€¢ Facility catalog and availability â€¢ Online booking and reservations â€¢ Usage tracking and statistical reports â€¢ Maintenance scheduling and coordination â€¢ Manage facility usage fees Billing and payment system: â€¢ Automatically generate periodic invoices â€¢ Support multiple payment methods â€¢ Track payments and transaction history â€¢ Late payment notifications and automatic reminders â€¢ Financial reports and statistics Notification and communication system: â€¢ Create and distribute building-wide notifications â€¢ Collect feedback from residents â€¢ Manage support tickets and requests â€¢ Real-time notifications and alerts â€¢ Communication and exchange history Reporting and analytics: â€¢ Overview dashboard with statistics â€¢ Detailed reports on building operations â€¢ Trend analysis and performance â€¢ Export reports to PDF/Excel â€¢ Charts and visual graphs 3.3 Hardware/software requirements Server requirements: â€¢ CPU: Intel Core i5 or higher, or equivalent AMD Ryzen 5 â€¢ RAM: Minimum 8GB, recommended 16GB â€¢ Storage: SSD 256GB or more â€¢ Operating system: Windows 10/11, Ubuntu 20.04 LTS â€¢ Network connection: 100Mbps or higher Client requirements: â€¢ Web browsers: Chrome 90+, Firefox 88+, Edge 90+, Safari 14+ â€¢ Mobile devices: Android 8.0+, iOS 12.0+ â€¢ RAM: Minimum 4GB for mobile devices â€¢ Stable internet connection Database requirements: â€¢  MySQL â€¢ Redis 6+ for cache and session â€¢ Storage capacity: Minimum 100GB â€¢ Automatic daily backups Development tools: â€¢ IDE: IntelliJ IDEA, Visual Studio Code, Android Studio â€¢ Version control: Git with GitHub â€¢ Database tools:  pgAdmin , Redis Desktop Manager â€¢ Testing tools: JUnit 5, Jest, Flutter testing framework Technology requirements: â€¢ Backend: Spring Boot 3.x, Java 17+ â€¢ Frontend: React.js 18+, TypeScript 5+ â€¢ Mobile: Flutter 3.x, Dart 3+ â€¢ Database:  MySQL â€¢ Authentication: JWT, Spring Security â€¢ Build tools: Maven,  npm , Flutter CLI 4. T ASK  S HEET   FOR   REVIEW  1 . Task ID Task Description Assignee Start Date End Date Status Notes R1-01 Research and document background and significance of the topic Huá»³nh  Táº¥n  Lá»±c 25/08/2025 03/09/2025 Completed Urbanization, manual processes, communication gaps R1-02 Define main and secondary objectives Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Completed Automation, UX, scalability, security, i18n R1-03 Specify project scope and core management functions Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Completed Users, apartments, facilities, billing, notifications R1-04 Identify system users and their characteristics Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Completed Admin, Staff, Resident, Owner; skills and needs R1-05 Analyze current situation and difficulties Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Completed Process, communication, facility, finance, access issues R1-06 Identify key problems to be addressed Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Completed Process automation, notifications, booking, payments R1-07 Propose overall system solutions and architecture Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Completed Web + Mobile + REST APIs; 3-tier architecture R1-08 Define non-functional requirements (performance, security, scalability, UX) Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Completed <2s response, 99.9% uptime, TLS, JWT, RBAC R1-09 Define functional requirements by module Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Completed User, Apartment, Facility, Billing, Notifications, Reporting R1-10 Specify hardware/software and tooling requirements Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Completed Server specs, clients, DB, Redis, tooling R1-11 Consolidate Review 1 document and obtain approval Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Completed Prepare final PDF/MD for submission REVIEW 2   Architecture & Design 1. SYSTEM ARCHITECTURE 1.1 3-tier architecture (Presentation, Business Logic, Data Access) The Smart Building Management System is designed with a traditional 3-tier architecture to ensure clear separation of concerns and easy maintenance and scalability. 1.2 Detailed roles of each tier + technologies used **Presentation Layer (User Interface ):* * Roles: â€¢ Provide interactive user interfaces â€¢ Process user input and display output â€¢ Ensure the best user experience â€¢ Handle responsive design for different devices Technologies used: â€¢ **Web Application (Admin Dashboard ):* *   - React.js 18+ with TypeScript 5+   - Tailwind CSS for styling   - React Router for navigation   - Axios for HTTP requests   - React Query for state management â€¢ **Mobile Application (Resident App ):* *   - Flutter 3.x with Dart 3+   - Material Design 3   - Provider for state management   - HTTP package for API calls   - Shared Preferences for local storage **Business Logic  Layer:* * Roles: â€¢ Process the core business logic of the system â€¢ Execute business rules and validation â€¢ Orchestrate between presentation and data access layers â€¢ Handle authentication and authorization â€¢ Manage business rules and workflows Technologies used: â€¢ **Spring Boot 3.x  Framework:* *   - Spring Security for authentication and authorization   - Spring Data JPA for data access   - Spring Web for REST APIs   - Spring Validation for input validation   - Spring Mail for email services   - Spring Scheduling for background tasks â€¢ **Business  Services:* *   - User Management Service   - Apartment Management Service   - Facility Booking Service   - Billing Service   - Notification Service   - Maintenance Service **Data Access  Layer:* * Roles: â€¢ Manage data storage and retrieval â€¢ Ensure data integrity and security â€¢ Optimize query performance â€¢ Manage connection pooling and caching â€¢ Backup and recovery Technologies used: â€¢ **Primary  Database:* *   -  MySQL   - Hibernate ORM for object-relational mapping   - Connection pooling with  HikariCP   - Database migration with Flyway â€¢ **Cache  Layer:* *   - Redis 6+ for session storage   - Redis for frequently accessed caching   - Redis for real-time notifications â€¢ **File  Storage:* *   - Local file system for development   - Cloud storage (AWS S3) for production   - Image optimization and compression 1.3 Overall system  Modular Monolith 1.4  OverallÂ architecture   diagram 1.5  Modular Monolith modules **MAIN SERVICE (Spring Boot ):* * - **User Management  Service:* * Manage users, roles, authentication - **Apartment Management  Service:* * Manage apartments, residents, statuses - **Billing  Service:* * Generate invoices, calculate fees, track payments - ** Database:* *  MySQL  for core data **REALTIME SERVICE (Spring Boot + WebSocket ):* * - **Notification  Service:* * Send real-time notifications, push notifications - **Chat  Service:* * Support chats between residents and staff - ** WebSocket:* * Real-time connections for the mobile app - ** Database:* * Redis for sessions and cache **FACILITY SERVICE (Spring Boot ):* * - **Facility Booking  Service:* * Manage facility reservations - **Scheduling  Service:* * Schedule maintenance, manage time - **Maintenance  Service:* * Handle maintenance requests - ** Database:* *  MySQL  for facility data **REPORTING SERVICE (Spring Boot ):* *   - **Analytics  Service:* * Data analytics, statistics - **Report  Generation:* * Generate PDF/Excel reports - **Data  Export:* * Export data on demand - ** Database:* *  MySQL **PAYMENT SERVICE (Spring Boot ):* * - **Payment  Gateway:* * Integrate payment gateways - **Transaction  Management:* * Manage transactions - **Refund  Processing:* * Handle refunds - ** Database:* *  MySQL  **SECURITY SERVICE (Spring Boot ):* * - **Access  Control:* * Access management, RBAC - ** Monitoring:* * System activity monitoring - **Alert  System:* * Security alert system - ** Database:* *  MySQL  + Redis logs 1.6 Data flows in the architecture User Request Flow: Inter-Service Communication: 3. Data Flow: 4. Real-time Communication: 2. DATA FLOW DIAGRAM (DFD) 2.1 Main flows of the  system **Flow 1: Login and authentication** Flow details: 1. The user enters login information 2. Frontend sends a request to the Authentication Service 3. The service validates credentials against the database 4. Generate a JWT token and return it to the client 5. The client stores the token and uses it for subsequent requests 6. Each request is checked by the Authorization Service **Flow 2: Facility booking** Flow details: 1. The resident selects a facility and time 2. Frontend sends a request to the Facility Booking Service 3. The service checks facility availability 4. Create a booking record in the database 5. Send confirmation via the Notification Service 6. Update facility status **Flow 3: Billing process** Flow details: 1. The system automatically generates periodic invoices 2. Billing Service calculates fees 3. Create the invoice and save it to the database 4. Send the invoice notification to the resident 5. Resident views and pays the invoice 6. Update payment status **Flow 4: Notification system** Admin/Staff â†’ Create notification â†’ Notification Service â†’ Database     â†“ Store notification â†’ Push Notification â†’ Mobile App â†’ Resident Flow details: 1. Admin or Staff creates a new notification 2. The notification is saved to the database 3. Notification Service sends a push notification 4. Mobile app receives and displays the notification 5. Resident can read and respond to the notification **Flow 5: Maintenance request handling** Flow details: 1. Resident submits a maintenance request 2. Maintenance Service saves the request to the database 3. The system assigns it to appropriate staff 4. Staff receives and processes the request 5. Update status and notify the resident 6. Save maintenance history 2.2 Overall data flow diagram 3. USE CASE DIAGRAM 3.1 Admin Use Cases  ( System-wide management) **Admin Use Case  Description:* * The  Admin  has the highest privileges in the system and can manage all components and functions. **Main Use  Cases:* * 1. **User Management**    - Actor: Admin    - Description: Admin can create, edit, delete, and manage all users    - Precondition: Admin has successfully logged in    - Main Flow:      * Admin accesses the user management page      * The system displays the list of all users      * Admin can perform CRUD operations      * The system updates the database and sends notifications    - Postcondition: User information is updated 2. **Apartment Management**    - Actor: Admin    - Description: Admin manages apartment info, assigns residents, tracks status    - Precondition: Admin has apartment management rights    - Main Flow:      * Admin views all apartments      * Add/edit/delete apartment information      * Assign residents to apartments      * Update apartment status    - Postcondition: Apartment information is updated 3. **Facility Management**    - Actor: Admin    - Description: Admin manages facility catalog, maintenance schedules, usage fees    - Precondition: Admin has facility management rights    - Main Flow:      * Admin views the list of facilities      * Add/edit/delete facilities      * Set maintenance schedules      * Update usage fees    - Postcondition: Facility information is updated 4. **Billing Management**    - Actor: Admin    - Description: Admin manages invoices, tracks payments, generates financial reports    - Precondition: Admin has financial management rights    - Main Flow:      * Admin views the list of invoices      * Manually create invoices if needed      * Track payment statuses      * Generate financial reports    - Postcondition: Invoices and reports are created 5. **Notification Management**    - Actor: Admin    - Description: Admin creates and sends system-wide notifications    - Precondition: Admin has permission to send notifications    - Main Flow:      * Admin creates a new notification      * Selects target recipients      * Sends the notification      * Tracks delivery status    - Postcondition: Notification is sent successfully 6. **View reports and analytics**    - Actor: Admin    - Description: Admin views overview reports and system statistics    - Precondition: Admin has permission to view reports    - Main Flow:      * Admin accesses the dashboard      * Views overview statistics      * Generates on-demand reports      * Exports reports to PDF/Excel    - Postcondition: Reports are generated and displayed 3.2 Staff Use Cases (Maintenance handling, facility management) **Staff Use Case  Description:* * Staff are operations personnel with permissions to handle maintenance requests, manage facilities, and support residents. **Main Use  Cases:* * 1. **Maintenance Request Handling**    - Actor: Staff    - Description: Staff receives and handles maintenance requests from residents    - Precondition: Staff is logged in and there are maintenance requests    - Main Flow:      * Staff views the list of maintenance requests      * Takes the request to handle      * Updates processing status      * Records notes and images during processing      * Completes and notifies the resident    - Postcondition: Maintenance request is fully processed 2. **Facility Management**    - Actor: Staff    - Description: Staff manages daily facility operations    - Precondition: Staff has facility management rights    - Main Flow:      * Staff views the facility booking schedule      * Checks facility status      * Updates facility status      * Handles incidents if any    - Postcondition: Facilities operate normally 3. **Resident Support**    - Actor: Staff    - Description: Staff supports residents in resolving issues    - Precondition: There are resident support requests    - Main Flow:      * Staff receives support requests      * Analyzes and resolves issues      * Updates processing status      * Notifies results to the resident    - Postcondition: Issues are resolved 4. **Update resident information**    - Actor: Staff    - Description: Staff updates resident information when necessary    - Precondition: Staff has permission to update information    - Main Flow:      * Staff views resident information      * Updates information as requested      * Confirms changes      * Notifies the resident    - Postcondition: Resident information is updated 3.3 Resident Use Cases (Booking, payment, receiving notifications) **Resident Use Case  Description:* * Residents live in the building and use the system to book facilities, pay invoices, and receive notifications. **Main Use  Cases:* * 1. **Facility Booking**    - Actor: Resident    - Description: Resident reserves usage of building facilities    - Precondition: Resident is logged in and the facility is available    - Main Flow:      * Resident views the list of facilities      * Selects a facility and time slot      * Checks availability      * Confirms the booking      * Receives confirmation notification    - Postcondition: Facility booking is successful 2. **Bill Payment**    - Actor: Resident    - Description: Resident views and pays invoices    - Precondition: Resident has invoices to pay    - Main Flow:      * Resident views invoice list      * Selects invoices to pay      * Chooses a payment method      * Makes the payment      * Receives payment confirmation    - Postcondition: Invoice is paid successfully 3. **Receive notifications**    - Actor: Resident    - Description: Resident receives and views notifications from management    - Precondition: Resident is logged into the system    - Main Flow:      * Resident receives new notifications      * Views notification content      * Marks as read      * Responds if needed    - Postcondition: Notification is processed 4. **Submit maintenance request**    - Actor: Resident    - Description: Resident submits maintenance requests when needed    - Precondition: Resident needs maintenance for apartment or facilities    - Main Flow:      * Resident creates a new maintenance request      * Describes the issue      * Selects priority level      * Submits the request      * Tracks processing status    - Postcondition: Maintenance request is submitted successfully 5. **View apartment information**    - Actor: Resident    - Description: Resident views detailed information about their apartment    - Precondition: Resident has been assigned to an apartment    - Main Flow:      * Resident accesses apartment information      * Views details      * Views maintenance history      * Views emergency contact information    - Postcondition: Resident has complete apartment information 6. **Update personal information**    - Actor: Resident    - Description: Resident updates their personal information    - Precondition: Resident wants to change information    - Main Flow:      * Resident opens the personal information page      * Edits necessary information      * Saves changes      * Receives confirmation    - Postcondition: Personal information is updated T ASK  S HEET   FOR   REVIEW  2 . Task ID Task Description Assignee Start Date End Date Status Notes R2-01 Define 3-tier architecture (Presentation, Business Logic, Data Access) Huá»³nh  Táº¥n  Lá»±c 25/08/2025 13/09/2025 Completed Clear responsibilities and boundaries R2-02 Detail roles of each tier and technologies used Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Completed React+TS , Flutter, Spring Boot, MySQL, Redis R2-03 Describe overall system architecture Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Completed Web, Mobile, RESTful APIs, 3-tier R2-04 Design microservices architecture diagram Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Pending Draw components and inter-service communication R2-05 Document microservices details (Main, Realtime, Facility, Reporting, Payment, Security) Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Completed Responsibilities, data stores, protocols R2-06 Define data flows (user request, inter-service, data,  realtime ) Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 In Progress Sequence and integration points R2-07 Create Data Flow Diagrams (DFD) for main flows Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Pending Context + Level 1 diagrams R2-08 Elaborate use case diagrams and descriptions (Admin/Staff/Resident) Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Completed Detailed flows and postconditions R2-09 Specify sequence flows for login, booking, billing, notifications, maintenance Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 In Progress Convert text flows to UML sequences R2-10 Define non-functional design decisions (scalability, security, caching, backups) Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Completed HikariCP , TLS, JWT, RBAC, Flyway, Redis R2-11 Prepare architecture diagrams (C4/Component/Deployment) Huá»³nh  Táº¥n  Lá»±c 25/08/2025 05/09/2025 Pending Use  PlantUML /Mermaid R2-12 Consolidate Review 2 package and submit Äáº·ng TrÃ­ Thá»©c 25/08/2025 05/09/2025 Pending Final MD/PDF with diagrams REVIEW 3   DATABASE & GUI DESIGN   SMART BUILDING   MANAGEMENT SYSTEM 1. DATABASE DESIGN 1.1 List of main entities The system is designed with 8 main entities to manage the entire operation of the apartment building: **1. Users** - Manage login information and roles - Support 3 user types: Admin, Staff, Resident **2. Apartments** - Store detailed information about apartments - Track statuses and apartment history **3. Residents** - Residentsâ€™ personal and contact information - Linked with apartments and user accounts **4. Facilities** - Catalog of facilities available in the building - Information on usage fees and maintenance schedules **5. Bookings** - Manage reservations for facility usage - Track booking history and payments **6. Invoices** - Periodic invoices and service fees - Track payment status **7. Announcements** - Notifications from management to residents - History of sending and receiving notifications **8.  SupportTickets ** - Maintenance and support requests from residents - Track processing progress 1.2 ERD (Entity-Relationship Diagram) 1.3 Detailed tables (attributes, primary keys, foreign keys) 1.4 Relationships between tables **1-1  relationships:* * - Users â†” Residents (one user corresponds to one resident) - Users â†” Apartments (one owner may have multiple apartments) **1-N  relationships:* * - Users â†’ Announcements (one user creates many notifications) - Apartments â†’ Residents (one apartment may have many residents) - Facilities â†’ Bookings (one facility has many bookings) **N-N  relationships:* * - Residents â†” Apartments (via a junction table) - Residents â†” Facilities (via the Bookings table) 2. USER INTERFACE (UI/UX) DESIGN 2.1 Website interface **2.1.1 Login** - ** Layout:* * Centered login form with gradient background - ** Components:* *   * System logo at top   * Login form with  phone number  and password   * â€œRemember meâ€ checkbox   * â€œForgot passwordâ€ and â€œRegisterâ€ links   * Login button with hover effect - ** Responsive:* * Auto-adjust for mobile and tablet **2.1.2 Dashboard** - ** Layout:* * Grid layout with sidebar navigation - ** Components:* *   * Sidebar: Main menu, user profile, quick actions   * Header: Search bar, notifications, user menu   * Main content: Statistic widgets, charts, data tables   * Footer: System info, support links - ** Widgets:* * Number of residents, apartments, facilities, unpaid invoices **2.1.3 Resident Management** - ** Layout:* * Table layout with search and filter - ** Components:* *   * Toolbar: Add new, import/export, bulk actions   * Search bar with filters by status, apartment   * Data table with pagination   * Modal form to add/edit resident info - ** Features:* * CRUD operations, bulk delete, Excel export **2.1.4 Facility Management** - ** Layout:* * Card layout with grid system - ** Components:* *   * Grid cards showing facilities   * Modal form to add/edit facilities   * Calendar view for bookings   * Status indicators (available, maintenance, closed) - ** Features:* * Manage maintenance schedules, update usage fees **2.1.5 Invoices** - ** Layout:* * Table layout with advanced filters - ** Components:* *   * Filter panel: By month, status, apartment   * Data table with sortable columns   * Action buttons: View details, send email, print PDF   * Summary panel: Total invoices, total amount - ** Features:* * Create manual invoices, send reminders **2.1.6 Announcements** - ** Layout:* * List layout with timeline view - ** Components:* *   * Form to create a new announcement   * Announcement list with priority indicators   * Preview panel for content   * Schedule panel for delivery time - ** Features:* * Draft, schedule, target audience selection 2.2 Mobile App interface **2.2.1 Login** - ** Layout:* * Full-screen form with clean design - ** Components:* *   * App logo and name at the top   * Input fields with Material Design   * Login button with loading state - ** UX:* * Auto-fill, password visibility toggle, error handling **2.2.2 Profile** - ** Layout:* * Single-column layout with sections - ** Components:* *   * Profile header with avatar and basic info   * Personal information section   * Apartment details section   * Settings section   * Logout button - ** Features:* * Edit profile, change password, preferences **2.2.3 Facility Booking** - ** Layout:* * List + Calendar hybrid - ** Components:* *   * Tab navigation: List view, Calendar view   * Facility cards with availability status   * Date picker for date selection   * Time slot picker for time selection   * Booking confirmation modal - ** UX:* * Real-time availability, conflict detection **2.2.4 Notifications** - ** Layout:* * List layout with grouping - ** Components:* *   * Notification list grouped by date   * Priority indicators (color coding)   * Swipe actions (mark read, delete)   * Pull-to-refresh   * Settings for notification preferences - ** Features:* * Push notifications, in-app notifications **2.2.5 Chat (Support)** - ** Layout:* * Chat interface with message bubbles - ** Components:* *   * Chat header with recipient info   * Message list with timestamps   * Input field with attachment support   * Quick reply buttons   * File/image sharing - ** Features:* * Real-time messaging, file upload, emoji support 2.3 UI/UX principles **2.3.1 Simplicity** - ** Minimalism:* * Remove unnecessary elements - **Clear  hierarchy:* * Use typography and spacing to structure content - **Progressive  disclosure:* * Reveal information in stages - **Consistent  patterns:* * Use consistent design patterns **2.3.2 Consistency** - **Design  system:* * Use design tokens for colors, typography, spacing - **Component  library:* * Build a reusable component library - **Icon  system:* * Use a consistent icon set - **Color  palette:* * Apply a consistent color scheme across the app **2.3.3 Responsive Design** - **Mobile-first  approach:* * Prioritize mobile design first - **Breakpoint  system:* * Use standard breakpoints (320px, 768px, 1024px, 1440px) - **Flexible  layouts:* * Use CSS Grid and Flexbox - **Touch- friendly:* * Ensure minimum 44px touch targets **2.3.4  Multi-language ** - **i18n  support:* * Support Vietnamese and English - **RTL  support:* * Support right-to-left languages - ** Localization:* * Format dates and currency by locale - **Cultural  adaptation:* * Adapt to local cultures **2.3.5 Accessibility** - **WCAG 2.1  compliance:* * Follow accessibility standards - **Keyboard  navigation:* * Support keyboard navigation - **Screen reader  support:* * Compatible with screen readers - **Color  contrast:* * Ensure sufficient color contrast **2.3.6 Performance** - **Fast  loading:* * Optimize page load time - **Smooth  animations:* * Use CSS transitions and animations - **Lazy  loading:* * Load data on demand - **Caching  strategy:* * Apply caching for static assets                             
